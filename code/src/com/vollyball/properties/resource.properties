# To change this license header, choose License Headers in Project Properties.
# To change this template file, choose Tools | Templates
# and open the template in the editor.

insert.signUp=insert into user_detail(id,username,emailid,password) values(?,?,?,?)

db.name=vollyball1
folder.name=PES-VB
vlc.path=E:\\VLC\\VLC64
pfx32Path=C:\\Program Files
pfx64Path=C:\\Program Files (x86)
#db.name=volley.db

create.competition = CREATE TABLE competition (id INTEGER PRIMARY KEY AUTO_INCREMENT, name VARCHAR(255) NOT NULL, venue VARCHAR(255) NOT NULL,start_date DATE NOT NULL,end_date DATE NOT NULL,age_group varchar(200) NOT NULL,isDeleted INTEGER default 0);

create.user = CREATE TABLE user (id INTEGER PRIMARY KEY AUTO_INCREMENT,name VARCHAR(255) NOT NULL,password varchar(250),email_id VARCHAR(255) NOT NULL,keycode VARCHAR(255) NOT NULL,is_activated INTEGER NOT NULL,mac_address varchar(500),created_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP);

create.team = CREATE TABLE teams (id INTEGER PRIMARY KEY AUTO_INCREMENT,name VARCHAR(255) NOT NULL,shortcode varchar(50),competition_id INTEGER NOT NULL,coach VARCHAR(255),asst_coach VARCHAR(255),trainer VARCHAR(255),medical_officer VARCHAR(255),analyzer VARCHAR(255),isdeleted int default 0 ,FOREIGN KEY(competition_id) REFERENCES competition(id));

create.players = CREATE TABLE players (id INTEGER PRIMARY KEY AUTO_INCREMENT,chest_num varchar(50) NOT NULL,name VARCHAR(255) NOT NULL,position int,is_captain int,team_id INT NOT NULL,isdeleted int default 0 , FOREIGN KEY(team_id) REFERENCES teams(id));

create.pool = CREATE TABLE pool (id INTEGER PRIMARY KEY AUTO_INCREMENT,name VARCHAR(255) NOT NULL,competition_id INTEGER NOT NULL,FOREIGN KEY(competition_id) REFERENCES competition(id));

create.matches = CREATE TABLE matches (id INTEGER PRIMARY KEY AUTO_INCREMENT,name VARCHAR(255) ,date DATE NOT NULL,time TIME NOT NULL,competition_id INTEGER NOT NULL,team1 INTEGER NOT NULL,team2 INTEGER NOT NULL,dayNumber INTEGER,matchNumber INTEGER,phase varchar(50),place varchar(500),won_by Integer,isdeleted int default 0 , FOREIGN KEY(team1) REFERENCES teams(id),FOREIGN KEY(team2) REFERENCES teams(id),FOREIGN KEY(competition_id) REFERENCES competition(id));

create.matchplayers = CREATE TABLE match_players (id INTEGER PRIMARY KEY AUTO_INCREMENT,match_id INTEGER NOT NULL,team1 INTEGER NOT NULL,player_id INTEGER NOT NULL,FOREIGN KEY(team1) REFERENCES teams(id),FOREIGN KEY(player_id) REFERENCES players(id),FOREIGN KEY(match_id) REFERENCES matches(id));

create.mskills = CREATE TABLE m_skills (id INTEGER PRIMARY KEY,name VARCHAR(100) NOT NULL);

create.mrating = CREATE TABLE m_rating (id INTEGER PRIMARY KEY,grade VARCHAR(255) NOT NULL);

create.mskilldesccriteria = CREATE TABLE m_skills_desc_criteria (id INTEGER PRIMARY KEY,type VARCHAR(255) NOT NULL,skill_id INTEGER NOT NULL,FOREIGN KEY(skill_id) REFERENCES m_skills(id));

create.mskilldesccriteriapoint = CREATE TABLE m_skill_desc_criteria_point (id INTEGER PRIMARY KEY,type varchar(100) NOT NULL,abbreviation varchar(20) NOT NULL,skill_desc_criteria_id INTEGER NOT NULL,FOREIGN KEY(skill_desc_criteria_id) REFERENCES m_skills_desc_criteria(id));

create.mskilldetails = CREATE TABLE m_skill_details (id INTEGER PRIMARY KEY,skill_id INTEGER NOT NULL,rating_id INTEGER NOT NULL,name varchar(500) NOT NULL,description TEXT NOT NULL, FOREIGN KEY(skill_id) REFERENCES m_skills(id),FOREIGN KEY(rating_id) REFERENCES m_rating(id));

create.matchevaluationteam = CREATE TABLE match_evaluation_team (id INTEGER PRIMARY KEY AUTO_INCREMENT,match_id INTEGER NOT NULL,evaluation_team_id INTEGER NOT NULL,opponent_team_id INTEGER NOT NULL,FOREIGN KEY(match_id) REFERENCES matches(id));

create.matchevaluationset = CREATE TABLE match_evaluation_set (id INTEGER PRIMARY KEY AUTO_INCREMENT,match_evaluation_team_id INTEGER NOT NULL,set_no INTEGER NOT NULL,homescore integer default 0,opponentscore integer default 0,won_by INTEGER ,start_time TIME NOT NULL,end_time TIME NOT NULL,evaluator VARCHAR(255) NOT NULL,date Date,FOREIGN KEY(match_evaluation_team_id) REFERENCES match_evaluation_team(id));

create.rally = CREATE TABLE rally (id INTEGER PRIMARY KEY AUTO_INCREMENT,number INTEGER NOT NULL,home_score INTEGER default 0,opponent_score INTEGER default 0,start_time varchar(50), end_time varchar(50),evaluation_id INTEGER NOT NULL,start_by integer, wonby integer,FOREIGN KEY(evaluation_id) REFERENCES match_evaluation_set(id));

create.rallydetails = CREATE TABLE rally_details (id INTEGER PRIMARY KEY AUTO_INCREMENT,skill INTEGER NOT NULL,chest_no INTEGER NOT NULL,rating INTEGER NOT NULL,order_num int not null,rally_id INTEGER NOT NULL,code varchar(5000),FOREIGN KEY(rally_id) REFERENCES rally(id));

create.rallydetailscriteria = CREATE TABLE rally_details_criteria (id INTEGER PRIMARY KEY AUTO_INCREMENT,skill_desc_criteria_id INTEGER NOT NULL,type varchar(250) NOT NULL,rally_details_id INTEGER NOT NULL,FOREIGN KEY(rally_details_id) REFERENCES rally_details(id),FOREIGN KEY(skill_desc_criteria_id) REFERENCES m_skills_desc_criteria(id));

create.setRotationOrder = CREATE TABLE setRotationOrder (id INTEGER PRIMARY KEY AUTO_INCREMENT,position	INTEGER NOT NULL,playerId INTEGER,match_evaluation_id INTEGER,type INTEGER,FOREIGN KEY(playerId) REFERENCES players(id),FOREIGN KEY(match_evaluation_id) REFERENCES match_evaluation_set(id));

create.setsubstitution = CREATE TABLE set_substitution (id INTEGER PRIMARY KEY AUTO_INCREMENT,position INTEGER,rotation_player_id INTEGER,substitute_player_id INTEGER,point1 varchar(50),point2 varchar(50),point1_at_rally_id integer,point2_at_rally_id integer,match_evaluation_id INTEGER,type integer,FOREIGN KEY(rotation_player_id) REFERENCES players(id),FOREIGN KEY(substitute_player_id) REFERENCES players(id),FOREIGN KEY(match_evaluation_id) REFERENCES match_evaluation_set(id));

create.setplusminus = CREATE TABLE set_plus_minus (id INTEGER PRIMARY KEY AUTO_INCREMENT, opponent_error varchar(50),team_fault varchar(50),match_evaluation_id INTEGER,FOREIGN KEY(match_evaluation_id) REFERENCES match_evaluation_set(id));

create.settimeout = CREATE TABLE set_timeOut (id INTEGER PRIMARY KEY AUTO_INCREMENT,position INTEGER,timeOut varchar(50),A varchar(50),B varchar(50),match_evaluation_id INTEGER,timeout_at_rally int,FOREIGN KEY(match_evaluation_id) REFERENCES match_evaluation_set(id));

create.rallyRotationorder = CREATE TABLE rally_rotation_order ( id integer NOT NULL PRIMARY KEY AUTO_INCREMENT, pos1playerId  integer, pos2playerId  integer, pos3playerId  integer, pos4playerId  integer, pos5playerId  integer, pos6playerId  integer, pos1playerIdOpp  integer, pos2playerIdOpp  integer, pos3playerIdOpp  integer, pos4playerIdOpp  integer, pos5playerIdOpp  integer, pos6playerIdOpp integer, rallyId       integer, FOREIGN KEY (rallyId) REFERENCES rally(id));

create.vollycoordinate = CREATE TABLE VollyCourtCoordinates (  id integer NOT NULL PRIMARY KEY ,  Type    varchar(50),  from_pos integer,  to_pos   integer,  x1      integer,  y1      integer,  x2      integer,  y2      integer,  x3      integer,  y3      integer,  x4      integer,  y4      integer);

create.matchevaluationsetlatestrotation = CREATE TABLE match_evaluation_set_latest_rotation ( id integer NOT NULL PRIMARY KEY AUTO_INCREMENT, pos1playerId  integer, pos2playerId  integer, pos3playerId  integer, pos4playerId  integer, pos5playerId  integer, pos6playerId  integer, match_evaluation_set_id       integer,	pos1OppplayerId	INTEGER,pos2OppplayerId	INTEGER,pos3OppplayerId	INTEGER,pos4OppplayerId	INTEGER,pos5OppplayerId	INTEGER,pos6OppplayerId	INTEGER, FOREIGN KEY (match_evaluation_set_id) REFERENCES match_evaluation_set(id));

insert.vollycoordinate = insert into VollyCourtCoordinates(id,Type,from_pos,to_pos,x1,y1,x2,y2,x3,y3,x4,y4) values(?,?,?,?,?,?,?,?,?,?,?,?);

#insert queries
insert.ratings = insert into m_rating(id,grade) values(?,?);
insert.skills = insert into m_skills(id,name) values(?,?);
insert.skillsdetails = insert into m_skill_details(id,skill_id,rating_id,name,description) values(?,?,?,?,?);
insert.skilldeccriteria = insert into m_skills_desc_criteria(id,type,skill_id) values(?,?,?);
insert.skilldeccriteriapoint = insert into m_skill_desc_criteria_point(id,type,abbreviation,skill_desc_criteria_id) values(?,?,?,?);

insert.user= insert into user (name,email_id,keycode,is_activated,mac_address,password) values(?,?,?,?,?,?);
insert.rallyRotationorder = insert into rally_rotation_order(pos1playerId,pos2playerId,pos3playerId,pos4playerId,pos5playerId,pos6playerId,pos1playerIdOpp,pos2playerIdOpp,pos3playerIdOpp,pos4playerIdOpp,pos5playerIdOpp,pos6playerIdOpp,rallyId) values(?,?,?,?,?,?,?,?,?,?,?,?,?);
update.rallyRotationorder = update rally_rotation_order set pos1playerId=?,pos2playerId=?,pos3playerId=?,pos4playerId=?,pos5playerId=?,pos6playerId=? where  rallyId=?
update.validity=update user set is_activated=?,keycode=? where id=?;

insert.setLatestorder = insert into match_evaluation_set_latest_rotation(pos1playerId,pos2playerId,pos3playerId,pos4playerId,pos5playerId,pos6playerId,match_evaluation_set_id,pos1OppplayerId,pos2OppplayerId,pos3OppplayerId,pos4OppplayerId,pos5OppplayerId,pos6OppplayerId) values(?,?,?,?,?,?,?,?,?,?,?,?,?);
update.setLatestorder = update match_evaluation_set_latest_rotation set pos1playerId=?,pos2playerId=?,pos3playerId=?,pos4playerId=?,pos5playerId=?,pos6playerId=? where  match_evaluation_set_id=?
update.setLatestorder.opp = update match_evaluation_set_latest_rotation set pos1OppplayerId=?,pos2OppplayerId=?,pos3OppplayerId=?,pos4OppplayerId=?,pos5OppplayerId=?,pos6OppplayerId=? where  match_evaluation_set_id=?

#After setup
check.login = select id from user where name = ? and password = ?;
insert.competition = insert into competition(name,venue,start_date,end_date,age_group) values(?,?,?,?,?);
update.user=update user set name=?,password=?,email_id=? where id=?;
#competition queries
get.competitionlist = select id,name,venue,start_date,end_date,age_group,isDeleted from competition where isDeleted=0;
get.competitionlistbyId=select id,name,venue,start_date,end_date,age_group from competition where id=? and isDeleted=0;
update.competition=update competition set name=?,venue=?,start_date=?,end_date=?,age_group=? where id=?;
delete.competition = update competition set isDeleted=1 where id=?;

#team queries
insert.team = insert into teams(name,coach,asst_coach,trainer,medical_officer,analyzer,competition_id,shortcode)values(?,?,?,?,?,?,?,?);
get.latest.team.id = select id from teams order by id desc limit 1;
insert.player = insert into players(name,chest_num,team_id,position,is_captain) values(?,?,?,?,?);
get.teams = select id,name,shortcode from teams where competition_id = ? and isdeleted=0;
get.players = select p.id,p.name,p.chest_num,p.position,t.name,p.is_captain from players p join teams t on p.team_id = t.id where team_id = ? 
get.matchplayers = select player_id from match_players where team1 = ? and match_id = ?
get.isMatchSelected  = select team1 from match_players where match_id=?;
get.team.detail = select t.id,t.name,t.shortcode,t.competition_id,t.coach,t.asst_coach,t.trainer,t.medical_officer,t.analyzer from teams t  where id = ?
update.player=update players set name=?,chest_num=?,team_id=?,position=?,is_captain=? where id=?;
get.all.players = select p.id,p.name,p.chest_num,p.position,t.name,p.is_captain from players p join teams t on p.team_id = t.id where t.competition_id = ? and t.isdeleted=0 and p.isdeleted=0
update.team=update teams set name=?,coach=?,asst_coach=?,trainer=?,medical_officer=?,analyzer=?,competition_id=?,shortcode=? where id=?;
delete.team = update teams set isdeleted=1 where id=?;
delete.player = update players set isdeleted=1 where id=?;
delete.match  = update matches set isdeleted=1 where id=?;

#Match queries
insert.match = insert into matches(team1,team2,dayNumber,matchNumber,date,TIME,phase,competition_id,place)values(?,?,?,?,?,?,?,?,?);
#get.matchesbyid= SELECT t1.name,t2.name,date,m.team1,m.team2,m.id,t1.shortcode,t2.shortcode,m.phase FROM matches m join teams t1 on t1.id = m.team1 join teams t2 on t2.id = m.team2  where m.competition_id = ? and m.id = ? order by date asc;
get.matchesbyid= SELECT t1.name,t2.name,date,m.team1,m.team2,m.id,t1.shortcode,t2.shortcode,m.phase,m.place,m.dayNumber,m.competition_id,m.time,m.matchNumber FROM matches m join teams t1 on t1.id = m.team1 join teams t2 on t2.id = m.team2  where m.competition_id = ? and m.id = ? order by date asc;
get.matches = SELECT t1.name,t2.name,date,m.team1,m.team2,m.id,m.time,m.dayNumber,m.matchNumber,m.phase,m.place FROM matches m join teams t1 on t1.id = m.team1 join teams t2 on t2.id = m.team2  where m.competition_id =? and m.isdeleted=0 order by date asc;
insert.matchplayers = insert into match_players(match_id,team1,player_id)values(?,?,?);
delete.matchPlayers = delete from match_players where match_id=? and team1=?;
search.matches = SELECT t1.name,t2.name,date,m.team1,m.team2,m.id,m.time,m.dayNumber,m.matchNumber,m.phase,m.place FROM matches m join teams t1 on t1.id = m.team1 join teams t2 on t2.id = m.team2  where m.competition_id =? and m.isdeleted=0


insert.matchsetevaluationteam = insert into match_evaluation_team (match_id ,evaluation_team_id ,opponent_team_id) values(?,?,?);
insert.matchset = insert into match_evaluation_set(match_evaluation_team_id,set_no,won_by,start_time,end_time,evaluator,date)values(?,?,?,?,?,?,?);
insert.matchset.rotationorder = insert into setRotationOrder(position,playerId,match_evaluation_id,type) values(?,?,?,?);
insert.matchset.substitution= insert into set_substitution(position,rotation_player_id,match_evaluation_id,type) values(?,?,?,?);
insert.matchset.plusminus= insert into set_plus_minus(opponent_error,team_fault,match_evaluation_id) values(?,?,?);
insert.matchset.timeout=insert into set_timeOut(position,timeOut,A,B,match_evaluation_id,timeout_at_rally) values(?,?,?,?,?,?);
update.matchseteval.timeout=update set_timeOut set timeOut=? ,A=?,B=?, timeout_at_rally=? where  position=? and match_evaluation_id=?;
get.matchsetset.timeout.id = select id from set_timeOut where  position=? and match_evaluation_id=?;
update.matchset.rotationorder = update setRotationOrder set playerId=? where position=? and match_evaluation_id=? and type=?;


update.matchset.score = update match_evaluation_set set homescore=? , opponentscore=? where id=?;
update.matchset.startdata =update match_evaluation_set set won_by=? ,start_time=?,end_time=?,evaluator=?,date=? where id=?
update.matchset.substitution.point1 = update set_substitution set substitute_player_id = ?, point1=?,point1_at_rally_id=? where position=? and match_evaluation_id=? and type=?
update.matchset.substitution.point2 = update set_substitution set point2=?,point2_at_rally_id=? where position=? and match_evaluation_id=? and type=?
update.matchset.plusminus=update set_plus_minus set opponent_error=? , team_fault=? where match_evaluation_id=?
update.matchset.timeout = update set_timeOut set A = ? , B = ? where id =?;

update.match=update matches set team1=?,team2=?,dayNumber=?,matchNumber=?,date=?,TIME=?,phase=?,competition_id=?,place=? where id=?;
update.matchsetevaluationteam=update match_evaluation_team set evaluation_team_id=?,opponent_team_id=? where id=?;
get.evaluationIdbymatchId=select id from match_evaluation_team where match_id=?;

update.matchset.substitution.point1.score = update set_substitution set  point1=? where id=?
update.matchset.substitution.point2.score = update set_substitution set  point2=? where id=?

get.latest.match.id = select id from matches order by id desc limit 1;
get.latest.matchset.id = select id from match_evaluation_set where match_evaluation_team_id = ? and set_no = ? order by id desc limit 1;
get.matchset = select mes.id,mes.match_evaluation_team_id,met.evaluation_team_id,met.opponent_team_id,mes.set_no,mes.homescore,mes.opponentscore,mes.won_by,mes.start_time,mes.end_time,mes.evaluator,mes.date from match_evaluation_set mes join match_evaluation_team met on mes.match_evaluation_team_id = met.id where match_evaluation_team_id = ? and set_no = ?
get.matchset.rotationorder = select id,position,playerId,match_evaluation_id from setRotationOrder where match_evaluation_id=? and type=?;
get.matchset.substitution= select id ,position,rotation_player_id,match_evaluation_id,substitute_player_id ,point1 ,point2  from set_substitution where match_evaluation_id=? and type=?;
get.matchset.plusminus = select opponent_error,team_fault from set_plus_minus where  match_evaluation_id=?
get.matchset.timeout.count = select count(id) from set_timeOut where match_evaluation_id=?
get.matchset.timeout = select position,timeOut,A,B,match_evaluation_id from set_timeOut where match_evaluation_id = ?
get.matchset.substitution.point1.forrally= select id ,position,rotation_player_id,match_evaluation_id,substitute_player_id ,point1 ,point2  from set_substitution where match_evaluation_id=? and point1_at_rally_id = ?
get.matchset.substitution.point2.forrally= select id ,position,rotation_player_id,match_evaluation_id,substitute_player_id ,point1 ,point2  from set_substitution where match_evaluation_id=? and point2_at_rally_id = ?

get.matchset.timeoutforrally = select id,position,timeOut,A,B,match_evaluation_id from set_timeOut where match_evaluation_id = ? and timeout_at_rally = ?
get.matchEvaluationTeamid = select id from match_evaluation_team where evaluation_team_id = ? and match_id = ?

insert.rally = insert into rally (number,home_score,opponent_score,start_time,end_time,evaluation_id,start_by, wonby) values(?,?,?,?,?,?,?,?);
insert.rallydetails = insert into rally_details(skill,chest_no,rating,rally_id,order_num,code) values(?,?,?,?,?,?);
insert.rallydetails.criteria = insert into rally_details_criteria (skill_desc_criteria_id,type,rally_details_id) values(?,?,?);

update.rallydetails = update rally_details set skill=? , chest_no=? ,rating=?,order_num=?,code=? where id =? and rally_id=?;
update.rallydetails.criteria = update rally_details_criteria set skill_desc_criteria_id=?,type=? where id = ?;

get.latest.rally.id = select id from rally order by id desc limit 1;
get.rally = select id,number,home_score,opponent_score,start_time,end_time,evaluation_id,start_by, wonby from rally where number = ? and evaluation_id = ?
get.rallydetails = select  id,skill,chest_no,rating,rally_id,code from rally_details where rally_id = ? order by order_num asc;
get.rallylist= select id,number from rally where evaluation_id = ?
get.latestrally = select id,home_score,opponent_score,start_by, wonby from rally where evaluation_id = ? order by id desc limit 1
get.rally.ratationorder = select pos1playerId,pos2playerId,pos3playerId,pos4playerId,pos5playerId,pos6playerId,pos1playerIdOpp,pos2playerIdOpp,pos3playerIdOpp,pos4playerIdOpp,pos5playerIdOpp,pos6playerIdOpp from rally_rotation_order where rallyId=?;
get.latest.rally.details.id = select id from rally_details order by id desc limit 1;
get.rallydetails.criteria = select  id,skill_desc_criteria_id,type,rally_details_id from rally_details_criteria where rally_details_id = ?;
get.rallydetails.criteria.id = select  id from rally_details_criteria where rally_details_id = ? and skill_desc_criteria_id=?;
get.rally.count = Select count(r.id) from rally r where r.evaluation_id  =?
get.matchset.latestorder = select pos1playerId,pos2playerId,pos3playerId,pos4playerId,pos5playerId,pos6playerId,pos1OppplayerId,pos2OppplayerId,pos3OppplayerId,pos4OppplayerId,pos5OppplayerId,pos6OppplayerId from match_evaluation_set_latest_rotation where match_evaluation_set_id=?;
get.rallylistgreaterthan = select id,number,home_score,opponent_score,start_time,end_time,evaluation_id from rally where number > ? and evaluation_id = ?

update.rally = update rally set home_score=? ,opponent_score=? , start_by=?, wonby=? where id=?;
delete.rallydetails = delete from rally_details where id = ?
delete.rallydetails.criteria =delete from rally_details_criteria where rally_details_id = ?

update.matchsetWonby = update match_evaluation_set set won_by = ? , end_time=? where id = ?

get.vollycourtcoordinates = select  x1,y1, x2,y2, x3,y3, x4,y4,Type,from_pos,to_pos from VollyCourtCoordinates where type=? and from_pos = ? and to_pos = ?

#report queries
get.skillwiseplayerreport = select p.id,p.name ,count(rd.skill) as  total_service ,sum(CASE WHEN rd.rating =5 THEN 1 else 0  END) as best ,t.name from rally_details rd join players p on rd.chest_no = p.id join rally r on r.id = rd.rally_id join match_evaluation_set me  on r.evaluation_id = me.id join match_evaluation_team met  on me.match_evaluation_team_id= met.id join matches m  on met.match_id = m.id join teams t on  p.team_id = t.id  where rd.skill = ? and m.competition_id = ?  group by rd.chest_no   ORDER BY best/total_service desc
get.skillwiseplayermatchreport = select m.id,printf('%s %s %s',t1.name, " vs ", t2.name) as match ,count(rd.skill) as  total_service ,sum(CASE WHEN rd.rating =5 THEN 1 else 0  END) as best from rally_details rd join players p on rd.chest_no = p.id join rally r on r.id = rd.rally_id join match_evaluation_set me on r.evaluation_id = me.id join match_evaluation_team met on me.match_evaluation_team_id= met.id join matches m on met.match_id = m.id join teams t1 on m.team1 = t1.id join teams t2 on m.team2 = t2.id  where rd.skill = ? and m.competition_id = ? and p.id = ?  group by m.id   ORDER BY best/total_service desc
get.skillwiseplayerMatchTeamreport = select p.id,p.name ,count(rd.skill) as  total_service ,sum(CASE WHEN rd.rating =5 THEN 1 else 0  END) as best from rally_details rd join players p on rd.chest_no = p.id join rally r on r.id = rd.rally_id join match_evaluation_set me on r.evaluation_id = me.id join matches m on me.match_id = m.id where rd.skill = ? and m.competition_id = ? and m.id=? and p.id in (select id from players where team_id = ?)group by rd.chest_no  ORDER BY best/total_service desc
get.skillwiseteamreport = select t.id,t.name,count(rd.skill) as  total_service ,sum(CASE WHEN rd.rating =5  THEN 1 else 0  END) as Service from players p join teams t on p.team_id = t.id join rally_details rd on p.id = rd.chest_no where rd.skill=? group by t.id order by Service/total_service desc
get.skillwiseteammatchreport =  select m.id,printf('%s %s %s',t1.name, " vs ", t2.name) as match ,count(rd.skill) as  total_service ,sum(CASE WHEN rd.rating =5 THEN 1 else 0  END) as best  from rally_details rd join players p  on rd.chest_no = p.id join rally r  on r.id = rd.rally_id join match_evaluation_set me  on r.evaluation_id = me.id join matches m  on me.match_id = m.id join teams t1 on m.team1 = t1.id join teams t2 on m.team2 = t2.id where rd.skill = ? and m.competition_id = ? and m.team1 = ? group by m.id ORDER BY best/total_service desc
get.player.scores=select p.id,p.name ,count(m.id) as matchesPlayed,sum(CASE WHEN rd.skill =1 THEN 1 else 0  END) as  total_service ,sum(CASE WHEN rd.rating =5 and rd.skill =1  THEN 1 else 0  END) as Service,sum(CASE WHEN rd.skill =2 THEN 1 else 0  END) as  total_Attack ,sum(CASE WHEN rd.rating =5 and rd.skill =2 THEN 1 else 0  END) as Attack ,sum(CASE WHEN rd.skill =3 THEN 1 else 0  END) as  total_block ,sum(CASE WHEN rd.rating =5 and rd.skill =3 THEN 1 else 0  END) as block ,sum(CASE WHEN rd.skill =4 THEN 1 else 0  END) as  total_set ,sum(CASE WHEN rd.rating =5 and rd.skill =4 THEN 1 else 0  END) as 'set' ,sum(CASE WHEN rd.skill =5 THEN 1 else 0  END) as  total_Reception ,sum(CASE WHEN rd.rating =5 and rd.skill =5 THEN 1 else 0  END) as Reception ,sum(CASE WHEN rd.skill =6 THEN 1 else 0  END) as  total_Defence ,sum(CASE WHEN rd.rating =5 and rd.skill =6 THEN 1 else 0  END) as Defence ,t.name,p.chest_num,p.position from rally_details rd join players p on rd.chest_no = p.id join rally r on r.id = rd.rally_id join match_evaluation_set me on r.evaluation_id = me.id join match_evaluation_team met on me.match_evaluation_team_id= met.id join matches m on met.match_id = m.id join teams t on p.team_id = t.id where m.competition_id = ? and p.id = ?  group by rd.chest_no
get.player.matchScore = select p.id,p.name ,count(m.id) as matchesPlayed,sum(CASE WHEN rd.skill =1 THEN 1 else 0  END) as  total_service ,sum(CASE WHEN rd.rating =5 and rd.skill =1  THEN 1 else 0  END) as Service,sum(CASE WHEN rd.skill =2 THEN 1 else 0  END) as  total_Attack ,sum(CASE WHEN rd.rating =5 and rd.skill =2 THEN 1 else 0  END) as Attack ,sum(CASE WHEN rd.skill =3 THEN 1 else 0  END) as  total_block ,sum(CASE WHEN rd.rating =5 and rd.skill =3 THEN 1 else 0  END) as block ,sum(CASE WHEN rd.skill =4 THEN 1 else 0  END) as  total_set ,sum(CASE WHEN rd.rating =5 and rd.skill =4 THEN 1 else 0  END) as 'set' ,sum(CASE WHEN rd.skill =5 THEN 1 else 0  END) as  total_Reception ,sum(CASE WHEN rd.rating =5 and rd.skill =5 THEN 1 else 0  END) as Reception ,sum(CASE WHEN rd.skill =6 THEN 1 else 0  END) as  total_Defence ,sum(CASE WHEN rd.rating =5 and rd.skill =6 THEN 1 else 0  END) as Defence ,t.name,p.chest_num,p.position from rally_details rd join players p on rd.chest_no = p.id join rally r on r.id = rd.rally_id join match_evaluation_set me on r.evaluation_id = me.id join match_evaluation_team met on me.match_evaluation_team_id= met.id join matches m on met.match_id = m.id join teams t on p.team_id = t.id where m.competition_id = ? and p.id = ?  and met.id = ? group by rd.chest_no
get.player.matches.played = select count(distinct(met.id))from match_evaluation_team met  join match_evaluation_set ms on ms.match_evaluation_team_id = met.id join rally r on r.evaluation_id = ms.id join rally_details rd on rd.rally_id = r.id where rd.chest_no = ?
get.plyer.skillWise.score = select p.id,p.name ,count(rd.skill) as  total_attempt,sum(CASE WHEN rd.rating =1  THEN 1 else 0  END) as one,sum(CASE WHEN rd.rating =2  THEN 1 else 0  END) as two,sum(CASE WHEN rd.rating =3  THEN 1 else 0  END) as three,sum(CASE WHEN rd.rating =4  THEN 1 else 0  END) as four,sum(CASE WHEN rd.rating =5  THEN 1 else 0  END) as five from rally_details rd join players p on rd.chest_no = p.id join rally r on r.id = rd.rally_id join match_evaluation_set me on r.evaluation_id = me.id join match_evaluation_team met on me.match_evaluation_team_id= met.id join matches m on met.match_id = m.id join teams t on p.team_id = t.id where m.competition_id = ? and p.id = ?  and rd.skill =? group by rd.chest_no
get.plyer.skillWise.scorebymatch = select p.id,p.name ,count(rd.skill) as  total_attempt,sum(CASE WHEN rd.rating =1  THEN 1 else 0  END) as one,sum(CASE WHEN rd.rating =2  THEN 1 else 0  END) as two,sum(CASE WHEN rd.rating =3  THEN 1 else 0  END) as three,sum(CASE WHEN rd.rating =4  THEN 1 else 0  END) as four,sum(CASE WHEN rd.rating =5  THEN 1 else 0  END) as five from rally_details rd join players p on rd.chest_no = p.id join rally r on r.id = rd.rally_id join match_evaluation_set me on r.evaluation_id = me.id join match_evaluation_team met on me.match_evaluation_team_id= met.id join matches m on met.match_id = m.id join teams t on p.team_id = t.id where m.competition_id = ? and p.id = ?  and rd.skill =? and m.id= ? group by rd.chest_no
get.team.skillWise.score = select t.id,t.name ,count(rd.skill) as  total_attempt,sum(CASE WHEN rd.rating =1  THEN 1 else 0  END) as one,sum(CASE WHEN rd.rating =2  THEN 1 else 0  END) as two,sum(CASE WHEN rd.rating =3  THEN 1 else 0  END) as three,sum(CASE WHEN rd.rating =4  THEN 1 else 0  END) as four,sum(CASE WHEN rd.rating =5  THEN 1 else 0  END) as five from rally_details rd join players p on rd.chest_no = p.id join rally r on r.id = rd.rally_id join match_evaluation_set me on r.evaluation_id = me.id join match_evaluation_team met on me.match_evaluation_team_id= met.id join matches m on met.match_id = m.id join teams t on p.team_id = t.id where m.competition_id = ? and t.id = ?  and rd.skill =? group by t.id
get.player.allScoresCountByMatch = select m.id,printf('%s %s %s',t1.name, " vs ", t2.name) as match ,count(rd.skill) as  total_service ,sum(CASE WHEN rd.rating =5 THEN 1 else 0  END) as score5, sum(CASE WHEN rd.rating =4 THEN 1 else 0  END) as score4 ,sum(CASE WHEN rd.rating =3 THEN 1 else 0  END) as score3 ,sum(CASE WHEN rd.rating =2 THEN 1 else 0  END) as score2, sum(CASE WHEN rd.rating =1 THEN 1 else 0  END) as score1 ,m.phase from rally_details rd join players p on rd.chest_no = p.id join rally r on r.id = rd.rally_id join match_evaluation_set me on r.evaluation_id = me.id join match_evaluation_team met on me.match_evaluation_team_id= met.id join matches m on met.match_id = m.id join teams t1 on m.team1 = t1.id join teams t2 on m.team2 = t2.id  where rd.skill = ? and m.competition_id = ? and p.id = ?  group by m.id ;
get.player.match.skillwisereport.by.match = select p.id,p.name,t.name,count(rd.skill) as  total_service ,sum(CASE WHEN rd.rating =5 THEN 1 else 0  END) as best from rally_details rd join players p on rd.chest_no = p.id join rally r on r.id = rd.rally_id join match_evaluation_set me on r.evaluation_id = me.id join match_evaluation_team met on me.match_evaluation_team_id= met.id  join teams t on met.evaluation_team_id = t.id where rd.skill = ? and p.id =?  and me.match_evaluation_team_id = ?  ORDER BY best/total_service desc
get.team.scores = select t.id,t.name,0,sum(CASE WHEN rd.skill =1 THEN 1 else 0  END) as  total_service ,sum(CASE WHEN rd.rating =5 and rd.skill =1  THEN 1 else 0  END) as Service,sum(CASE WHEN rd.skill =2 THEN 1 else 0  END) as  total_Attack ,sum(CASE WHEN rd.rating =5 and rd.skill =2 THEN 1 else 0  END) as Attack ,sum(CASE WHEN rd.skill =3 THEN 1 else 0  END) as  total_block ,sum(CASE WHEN rd.rating =5 and rd.skill =3 THEN 1 else 0  END) as block ,sum(CASE WHEN rd.skill =4 THEN 1 else 0  END) as  total_set ,sum(CASE WHEN rd.rating =5 and rd.skill =4 THEN 1 else 0  END) as 'set' ,sum(CASE WHEN rd.skill =5 THEN 1 else 0  END) as  total_Reception ,sum(CASE WHEN rd.rating =5 and rd.skill =5 THEN 1 else 0  END) as Reception ,sum(CASE WHEN rd.skill =6 THEN 1 else 0  END) as  total_Defence ,sum(CASE WHEN rd.rating =5 and rd.skill =6 THEN 1 else 0  END) as Defence ,t.name from players p join teams t on p.team_id = t.id join rally_details rd on p.id = rd.chest_no where t.id = ?
get.team.matches.played = select count(met.id) from match_evaluation_team met  join match_evaluation_set ms on ms.match_evaluation_team_id = met.id where met.evaluation_team_id = ?;

get.match.evaluationId = select id from match_evaluation_team where evaluation_team_id = ?
get.team.match.details=select met.match_id  ,t.name,0,sum(CASE WHEN rd.skill =1 THEN 1 else 0  END) as  total_service ,sum(CASE WHEN rd.rating =5 and rd.skill =1  THEN 1 else 0  END) as Service,sum(CASE WHEN rd.skill =2 THEN 1 else 0  END) as  total_Attack ,sum(CASE WHEN rd.rating =5 and rd.skill =2 THEN 1 else 0  END) as Attack ,sum(CASE WHEN rd.skill =3 THEN 1 else 0  END) as  total_block ,sum(CASE WHEN rd.rating =5 and rd.skill =3 THEN 1 else 0  END) as block ,sum(CASE WHEN rd.skill =4 THEN 1 else 0  END) as  total_set ,sum(CASE WHEN rd.rating =5 and rd.skill =4 THEN 1 else 0  END) as 'set' ,sum(CASE WHEN rd.skill =5 THEN 1 else 0  END) as  total_Reception ,sum(CASE WHEN rd.rating =5 and rd.skill =5 THEN 1 else 0  END) as Reception ,sum(CASE WHEN rd.skill =6 THEN 1 else 0  END) as  total_Defence ,sum(CASE WHEN rd.rating =5 and rd.skill =6 THEN 1 else 0  END) as Defence from players p join teams t on p.team_id = t.id join rally_details rd on p.id = rd.chest_no join rally r on r.id = rd.rally_id join match_evaluation_set mes on mes.id = r.evaluation_id join match_evaluation_team met on met.evaluation_team_id = t.id where met.id = ?
get.match.name = select printf('%s %s %s',t1.shortcode, " vs ", t2.shortcode), m.phase from matches m join teams t1 on m.team1 = t1.id join teams t2 on m.team2 = t2.id where m.id = ?
get.match.evaluationId.bymatch = select id from match_evaluation_team where evaluation_team_id = ? and match_id =?

get.rallydetialsByPlayerSkill = select rd.id,rd.skill, p.id,rd.rating,r.id from rally_details rd join players p on rd.chest_no = p.id  join rally r on r.id = rd.rally_id  join match_evaluation_set me on r.evaluation_id = me.id  join match_evaluation_team met on me.match_evaluation_team_id= met.id  join matches m on met.match_id = m.id join teams t on p.team_id = t.id  where p.id = ?  and rd.skill =?
get.rallydetialsByPlayerSkillbyrating = select rd.id,rd.skill, p.id,rd.rating,r.id from rally_details rd join players p on rd.chest_no = p.id  join rally r on r.id = rd.rally_id  join match_evaluation_set me on r.evaluation_id = me.id join match_evaluation_team met on me.match_evaluation_team_id= met.id join matches m on met.match_id = m.id join teams t on p.team_id = t.id where p.id = ?  and rd.skill =? and rd.rating = ?
get.playerDetailById = select p.id,p.name,p.position,p.is_captain,p.chest_num,p.team_id,t.name,t.shortcode from players p join teams t on p.team_id = t.id where p.id = ?
get.rallydetailsByPlayerSkillMatch = select rd.id,rd.skill, p.id,rd.rating,r.id from rally_details rd join players p on rd.chest_no = p.id  join rally r on r.id = rd.rally_id  join match_evaluation_set me on r.evaluation_id = me.id  join match_evaluation_team met on me.match_evaluation_team_id= met.id  join matches m on met.match_id = m.id join teams t on p.team_id = t.id  where p.id = ?  and rd.skill =?  and m.id=?


get.rallydetailsByPlayerSkillMatchRating = select rd.id,rd.skill, p.id,rd.rating,r.id from rally_details rd join players p on rd.chest_no = p.id  join rally r on r.id = rd.rally_id  join match_evaluation_set me on r.evaluation_id = me.id  join match_evaluation_team met on me.match_evaluation_team_id= met.id  join matches m on met.match_id = m.id join teams t on p.team_id = t.id  where p.id = ?  and rd.skill =?  and m.id=? and rd.rating = ?
get.setandwonbymatch = select won_by from match_evaluation_set mes join match_evaluation_team met on mes.match_evaluation_team_id = met.id where mes.match_evaluation_team_id=?
update.matchWonBy = update matches set won_by = ? where id = ?
get.team.reagistertotal = select ?,sum(CASE WHEN m.team1 =? THEN 1 else (case when m.team2=? then 1 else 0 end)  END) from matches m
get.teamwonloss = select sum(CASE WHEN m.won_by= ? THEN 1 else 0 END) as win,sum(CASE WHEN m.won_by <> 0 and m.won_by<>? THEN 1 else 0 end) as loss from matches m where m.team1 = ? or m.team2=?;

get.match.teamDetails=select t.id,t.name,sum(CASE WHEN rd.skill =1 THEN 1 else 0  END) as  total_service ,sum(CASE WHEN rd.rating =5 and rd.skill =1  THEN 1 else 0  END) as Service,sum(CASE WHEN rd.skill =2 THEN 1 else 0  END) as  total_Attack ,sum(CASE WHEN rd.rating =5 and rd.skill =2 THEN 1 else 0  END) as Attack ,sum(CASE WHEN rd.skill =3 THEN 1 else 0  END) as  total_block ,sum(CASE WHEN rd.rating =5 and rd.skill =3 THEN 1 else 0  END) as block ,sum(CASE WHEN rd.skill =4 THEN 1 else 0  END) as  total_set ,sum(CASE WHEN rd.rating =5 and rd.skill =4 THEN 1 else 0  END) as 'set' ,sum(CASE WHEN rd.skill =5 THEN 1 else 0  END) as  total_Reception ,sum(CASE WHEN rd.rating =5 and rd.skill =5 THEN 1 else 0  END) as Reception ,sum(CASE WHEN rd.skill =6 THEN 1 else 0  END) as  total_Defence ,sum(CASE WHEN rd.rating =5 and rd.skill =6 THEN 1 else 0  END) as Defence from rally_details rd join players p on rd.chest_no = p.id join rally r on r.id = rd.rally_id join match_evaluation_set me on r.evaluation_id = me.id join match_evaluation_team met on me.match_evaluation_team_id= met.id join matches m on met.match_id = m.id join teams t on p.team_id = t.id where m.competition_id = ? and m.id = ? group by t.id
get.team.skillwisescore.ofmatch = select t.id,t.name ,count(rd.skill) as  total_attempt,sum(CASE WHEN rd.rating =1  THEN 1 else 0  END) as one,sum(CASE WHEN rd.rating =2  THEN 1 else 0  END) as two,sum(CASE WHEN rd.rating =3  THEN 1 else 0  END) as three,sum(CASE WHEN rd.rating =4  THEN 1 else 0  END) as four,sum(CASE WHEN rd.rating =5  THEN 1 else 0  END) as five from rally_details rd join players p on rd.chest_no = p.id join rally r on r.id = rd.rally_id join match_evaluation_set me on r.evaluation_id = me.id join match_evaluation_team met on me.match_evaluation_team_id= met.id join matches m on met.match_id = m.id join teams t on p.team_id = t.id where m.competition_id = ? and t.id = ? and m.id=? and rd.skill =? group by t.id
get.match.teamDetails.byplayer = select p.id,p.name,sum(CASE WHEN rd.skill =1 THEN 1 else 0  END) as  total_service ,sum(CASE WHEN rd.rating =5 and rd.skill =1  THEN 1 else 0  END) as Service,sum(CASE WHEN rd.skill =2 THEN 1 else 0  END) as  total_Attack ,sum(CASE WHEN rd.rating =5 and rd.skill =2 THEN 1 else 0  END) as Attack ,sum(CASE WHEN rd.skill =3 THEN 1 else 0  END) as  total_block ,sum(CASE WHEN rd.rating =5 and rd.skill =3 THEN 1 else 0  END) as block ,sum(CASE WHEN rd.skill =4 THEN 1 else 0  END) as  total_set ,sum(CASE WHEN rd.rating =5 and rd.skill =4 THEN 1 else 0  END) as 'set' ,sum(CASE WHEN rd.skill =5 THEN 1 else 0  END) as  total_Reception ,sum(CASE WHEN rd.rating =5 and rd.skill =5 THEN 1 else 0  END) as Reception ,sum(CASE WHEN rd.skill =6 THEN 1 else 0  END) as  total_Defence ,sum(CASE WHEN rd.rating =5 and rd.skill =6 THEN 1 else 0  END) as Defence from rally_details rd join players p on rd.chest_no = p.id join rally r on r.id = rd.rally_id join match_evaluation_set me on r.evaluation_id = me.id join match_evaluation_team met on me.match_evaluation_team_id= met.id join matches m on met.match_id = m.id join teams t on p.team_id = t.id where m.competition_id = ? and m.id = ? and t.id = ? and p.id= ? group by t.id

#user
get.userDetails=select id,name,email_id,keycode,is_activated,mac_address,created_on,password from user where id=?;


create.batch = CREATE TABLE batch (id INTEGER PRIMARY KEY AUTO_INCREMENT,name VARCHAR(255) NOT NULL,trainer VARCHAR(255),medical_officer VARCHAR(255),analyzer VARCHAR(255), venue VARCHAR(255) NOT NULL,start_date DATE NOT NULL,end_date DATE NOT NULL,age_group varchar(200) NOT NULL,isDeleted INTEGER default 0);
create.trainee = CREATE TABLE trainee (id INTEGER PRIMARY KEY AUTO_INCREMENT,name VARCHAR(255) NOT NULL,batch_id INT NOT NULL,isDeleted INTEGER default 0,FOREIGN KEY(batch_id) REFERENCES batch(id));
create.batchTeam= CREATE TABLE batchteam(id INTEGER PRIMARY KEY AUTO_INCREMENT,name VARCHAR(255) NOT NULL,batch_id INT NOT NULL,FOREIGN KEY(batch_id) REFERENCES batch(id));
create.batchMatchPlayer= CREATE TABLE batchmatchplayer(id INTEGER PRIMARY KEY AUTO_INCREMENT,batchteam_id INT,trainee_id INT,position INT,FOREIGN KEY(batchteam_id) REFERENCES batchteam(id),FOREIGN KEY(trainee_id) REFERENCES trainee(id));
##batch queries
insert.batch = insert into batch(name,trainer,medical_officer,analyzer,venue,start_date,end_date,age_group)values(?,?,?,?,?,?,?,?);
get.latest.batch.id = select id from batch order by id desc limit 1;
insert.trainee = insert into trainee(name,batch_id) values(?,?);
update.trainee = update trainee set name=? where batch_id=? and id=?;
insert.batchTeam=insert into batchteam(name,batch_id) values(?,?);
get.batchTeam=select id from batchteam where batch_id=?;
insert.batchMatchTeam=insert into batchmatchplayer(batchteam_id,trainee_id,position) values(?,?,?);

get.batchlist = select id,name,trainer,venue,start_date,end_date,age_group from batch where isDeleted=0;
get.batchDeatil.byId=SELECT id,name,trainer,medical_officer,analyzer,venue,start_date,end_date,age_group from batch where isDeleted=0 and id=?;
update.batch=update batch set name=?,trainer=?,medical_officer=?,analyzer=?,venue=?,start_date=?,end_date=?,age_group=? where id=?;
get.traineelist=select id,name,batch_id from trainee where batch_id=?
team.skillwisereport.success.summary=select t.id,t.name,sum(CASE WHEN rd.skill =1 THEN 1 else 0  END) as  total_service ,sum(CASE WHEN rd.rating =5 and rd.skill =1  THEN 1 else 0  END) as Service,sum(CASE WHEN rd.skill =2 THEN 1 else 0  END) as  total_Attack ,sum(CASE WHEN rd.rating =5 and rd.skill =2 THEN 1 else 0  END) as Attack ,sum(CASE WHEN rd.skill =3 THEN 1 else 0  END) as  total_block ,sum(CASE WHEN rd.rating =5 and rd.skill =3 THEN 1 else 0  END) as block ,sum(CASE WHEN rd.skill =4 THEN 1 else 0  END) as  total_set ,sum(CASE WHEN rd.rating =5 and rd.skill =4 THEN 1 else 0  END) as 'set' ,sum(CASE WHEN rd.skill =5 THEN 1 else 0  END) as  total_Reception ,sum(CASE WHEN rd.rating =5 and rd.skill =5 THEN 1 else 0  END) as Reception ,sum(CASE WHEN rd.skill =6 THEN 1 else 0  END) as  total_Defence ,sum(CASE WHEN rd.rating =5 and rd.skill =6 THEN 1 else 0  END) as Defence from players p join teams t on p.team_id = t.id join rally_details rd on p.id = rd.chest_no join rally r on r.id = rd.rally_id join match_evaluation_set me on r.evaluation_id = me.id join match_evaluation_team met on me.match_evaluation_team_id= met.id join matches m on met.match_id = m.id where  m.competition_id = ? and m.id = ? and t.id = ?;
team.skillwisereport.error.summary=select t.id,t.name,sum(CASE WHEN rd.skill =1 THEN 1 else 0  END) as  total_service ,sum(CASE WHEN rd.rating =1 and rd.skill =1  THEN 1 else 0  END) as Service,sum(CASE WHEN rd.skill =2 THEN 1 else 0  END) as  total_Attack ,sum(CASE WHEN rd.rating =1 and rd.skill =2 THEN 1 else 0  END) as Attack ,sum(CASE WHEN rd.skill =3 THEN 1 else 0  END) as  total_block ,sum(CASE WHEN rd.rating =1 and rd.skill =3 THEN 1 else 0  END) as block ,sum(CASE WHEN rd.skill =4 THEN 1 else 0  END) as  total_set ,sum(CASE WHEN rd.rating =1 and rd.skill =4 THEN 1 else 0  END) as 'set' ,sum(CASE WHEN rd.skill =5 THEN 1 else 0  END) as  total_Reception ,sum(CASE WHEN rd.rating =1 and rd.skill =5 THEN 1 else 0  END) as Reception ,sum(CASE WHEN rd.skill =6 THEN 1 else 0  END) as  total_Defence ,sum(CASE WHEN rd.rating =1 and rd.skill =6 THEN 1 else 0  END) as Defence from players p join teams t on p.team_id = t.id join rally_details rd on p.id = rd.chest_no join rally r on r.id = rd.rally_id join match_evaluation_set me on r.evaluation_id = me.id join match_evaluation_team met on me.match_evaluation_team_id= met.id join matches m on met.match_id = m.id where  m.competition_id = ? and m.id = ? and t.id = ?;

team.setwise.win.score=select me.set_no,count(rd.skill) as  total_attempt,sum(CASE WHEN rd.rating =5  THEN 1 else 0  END) as serive from rally_details rd join rally r on r.id = rd.rally_id join match_evaluation_set me on r.evaluation_id = me.id join match_evaluation_team met on me.match_evaluation_team_id= met.id join matches m on met.match_id = m.id join teams t on met.evaluation_team_id = t.id where  rd.skill =? and met.id=? and me.set_no=?;
team.setwise.loss.score=select me.set_no,count(rd.skill) as  total_attempt,sum(CASE WHEN rd.rating =1  THEN 1 else 0  END) as serive from rally_details rd join rally r on r.id = rd.rally_id join match_evaluation_set me on r.evaluation_id = me.id join match_evaluation_team met on me.match_evaluation_team_id= met.id join matches m on met.match_id = m.id join teams t on met.evaluation_team_id = t.id where  rd.skill =? and met.id=? and me.set_no=?;
team.ss.opdata.score=select me.set_no,count(rd.skill) as  total_attempt from rally_details rd join rally r on r.id = rd.rally_id join match_evaluation_set me on r.evaluation_id = me.id join match_evaluation_team met on me.match_evaluation_team_id= met.id join matches m on met.match_id = m.id join teams t on met.evaluation_team_id = t.id where  rd.skill =? and met.id=?;
team.nss.tfdata.score=select me.set_no,count(rd.skill) as  total_attempt from rally_details rd join rally r on r.id = rd.rally_id join match_evaluation_set me on r.evaluation_id = me.id join match_evaluation_team met on me.match_evaluation_team_id= met.id join matches m on met.match_id = m.id join teams t on met.evaluation_team_id = t.id where  rd.skill =? and met.id=?;

player.setwise.data=select p.id,p.name,sum(CASE WHEN rd.rating =5 THEN 1 else 0  END) as Service from rally_details rd join rally r on r.id = rd.rally_id join match_evaluation_set me on r.evaluation_id = me.id join match_evaluation_team met on me.match_evaluation_team_id= met.id join players p on rd.chest_no = p.id where p.id=? and me.set_no=? and met.id=? and rd.skill in (?,?,?,?)

#Settings Table
create.settings=CREATE TABLE shortcut_settings (id INTEGER PRIMARY KEY AUTO_INCREMENT,shortcutId INTEGER,headingId INTEGER,code VARCHAR(100) NOT NULL,abbr VARCHAR(100) NOT NULL);
insert.setting=insert into shortcut_settings(headingId,shortcutId,code,abbr) values(?,?,?,?);
get.headingId=select headingId from shortcut_settings GROUP BY headingId;
get.setting.fromHeadingId=select headingId,shortcutId,code,abbr from shortcut_settings where headingId=?
update.setting=update shortcut_settings set code=? where shortcutId=?
get.code.for.shortCutId=select shortcutId,code from shortcut_settings where shortcutId=?;

get.substitues.forSelect=select id,position,rotation_player_id,substitute_player_id,point1,point2,point1_at_rally_id,point2_at_rally_id,match_evaluation_id from set_substitution where position=? and match_evaluation_id=? and type=?;
set.substitues.forSelect=update set_substitution set rotation_player_id=?,substitute_player_id=?,point1=?,point2=?,point1_at_rally_id=?,point2_at_rally_id=? where id=?;

get.zone.details=select rdc.type,rd.rating from rally_details rd  join rally r on r.id = rd.rally_id join match_evaluation_set me on r.evaluation_id = me.id join match_evaluation_team met on met.id=me.match_evaluation_team_id join rally_details_criteria rdc on rdc.rally_details_id=rd.id where rd.skill =? and rdc.skill_desc_criteria_id=? and met.id=?
get.setwise.rotation = select rro.pos1playerId,rro.pos2playerId,rro.pos3playerId,rro.pos4playerId,rro.pos5playerId,rro.pos6playerId,r.wonby from rally_rotation_order rro  join rally r on r.id = rro.rallyId  join match_evaluation_set me on r.evaluation_id = me.id where me.match_evaluation_team_id = ? and set_no=?
get.successFailure=select sum(CASE WHEN rdc.type=? and rd.rating=5 THEN 1 else 0  END) as success,sum(CASE WHEN rdc.type=? and rd.rating=1 THEN 1 else 0  END) as failure from rally_details_criteria rdc join rally_details rd on rd.id=rdc.rally_details_id join rally r on r.id=rd.rally_id join match_evaluation_set me on r.evaluation_id=me.id join match_evaluation_team met on met.id=me.match_evaluation_team_id where met.id=? and rdc.skill_desc_criteria_id=? and rd.skill=?;
get.block.descwise.successFailure=select sum(CASE WHEN rdc.type='NB' and rd.rating=5 THEN 1 else 0  END) as success_NB,sum(CASE WHEN rdc.type='NB' and rd.rating=1 THEN 1 else 0  END) as failure_NB,sum(CASE WHEN rdc.type='SGL' and rd.rating=5 THEN 1 else 0  END) as success_SGL,sum(CASE WHEN rdc.type='SGL' and rd.rating=1 THEN 1 else 0  END) as failure_SGL,sum(CASE WHEN rdc.type='DBL' and rd.rating=5 THEN 1 else 0  END) as success_DBL,sum(CASE WHEN rdc.type='DBL' and rd.rating=1 THEN 1 else 0  END) as failure_DBL,sum(CASE WHEN rdc.type='TPL' and rd.rating=5 THEN 1 else 0  END) as success_TPL,sum(CASE WHEN rdc.type='TPL' and rd.rating=1 THEN 1 else 0  END) as failure_TPL from rally_details_criteria rdc join rally_details rd on rd.id=rdc.rally_details_id join rally r on r.id=rd.rally_id join match_evaluation_set me on r.evaluation_id=me.id join match_evaluation_team met on met.id=me.match_evaluation_team_id where met.id=? and rdc.skill_desc_criteria_id=?;
get.service.descwise.successfailure=select sum(CASE WHEN rdc.type='JF' and rd.rating=5 THEN 1 else 0  END) as success_jf,sum(CASE WHEN rdc.type='JF' and rd.rating=1 THEN 1 else 0  END) as failure_jf,sum(CASE WHEN rdc.type='JP' and rd.rating=5 THEN 1 else 0  END) as success_jp,sum(CASE WHEN rdc.type='JP' and rd.rating=1 THEN 1 else 0  END) as failure_jp,sum(CASE WHEN rdc.type='SF' and rd.rating=5 THEN 1 else 0  END) as success_sf,sum(CASE WHEN rdc.type='SF' and rd.rating=1 THEN 1 else 0  END) as failure_sf,sum(CASE WHEN rdc.type='SS' and rd.rating=5 THEN 1 else 0  END) as success_ss,sum(CASE WHEN rdc.type='SS' and rd.rating=1 THEN 1 else 0  END) as failure_ss from rally_details_criteria rdc join rally_details rd on rd.id=rdc.rally_details_id join rally r on r.id=rd.rally_id join match_evaluation_set me on r.evaluation_id=me.id join match_evaluation_team met on met.id=me.match_evaluation_team_id where met.id=? and rdc.skill_desc_criteria_id=?;

get.matchPlayer.successFailure.byplayer=select p.id,p.name,count(rd.skill) as  total_attempt,sum(CASE WHEN rd.rating =5  THEN 1 else 0  END) as success,sum(CASE WHEN rd.rating =1  THEN 1 else 0  END) as failure from rally_details rd join rally r on rd.rally_id = r.id join match_evaluation_set mes on mes.id = r.evaluation_id join players p on rd.chest_no = p.id where mes.match_evaluation_team_id = ? and rd.skill = ? group by p.id


get.complexwise.attack.query =select sum(CASE WHEN rdc.type=? and rd.rating=5 THEN 1 else 0  END) as success,sum(CASE WHEN rdc.type=? and rd.rating=1 THEN 1 else 0  END) as failure,sum(CASE WHEN rdc.type=? THEN 1 else 0  END) as total_attempt from rally_details rd join rally_details_criteria rdc on rd.id = rdc.rally_details_id where  rd.id in (select rdc.rally_details_id  				from rally_details_criteria rdc 				join rally_details rd on rdc.rally_details_id = rd.id 				join rally r on r.id = rd.rally_id 				join match_evaluation_set mes on r.evaluation_id = mes.id 				where (rdc.skill_desc_criteria_id = ? AND rdc.type = ?) and rd.skill=? and mes.match_evaluation_team_id=?) 		and rdc.skill_desc_criteria_id = ?;

get.skillteamsuccess.select = sum(CASE WHEN rdc.type='?' and rd.rating=+ THEN 1 else 0  END) as val,
get.skillteamsuccess.query.withTwoConditions = select + FROM rally_details rd JOIN rally r ON r.id = rd.rally_id JOIN rally_details_criteria rdc ON rd.id = rdc.rally_details_id JOIN rally_details_criteria rdc1 ON rd.id = rdc1.rally_details_id JOIN rally_details_criteria rdc2 ON  rd.id = rdc2.rally_details_id JOIN match_evaluation_set mes ON r.evaluation_id = mes.id    where rd.skill=?  		and mes.match_evaluation_team_id=?  		and rdc.skill_desc_criteria_id = ? 		and rdc1.type=? 		and rdc1.skill_desc_criteria_id = ? 		AND rdc2.type = ? 		and rdc2.skill_desc_criteria_id = ?
get.skillteamsuccess.query=select + FROM rally_details rd JOIN rally r ON r.id = rd.rally_id JOIN rally_details_criteria rdc ON rd.id = rdc.rally_details_id JOIN rally_details_criteria rdc1 ON rd.id = rdc1.rally_details_id JOIN match_evaluation_set mes ON r.evaluation_id = mes.id    where rd.skill=?  		and mes.match_evaluation_team_id=?  		and rdc.skill_desc_criteria_id = ? 		and rdc1.type=? 		and rdc1.skill_desc_criteria_id = ?


guid.formula=CONCATENATE(DEC2HEX(RANDBETWEEN(0,42949),4),"-",DEC2HEX(RANDBETWEEN(0,42949),4),"-",DEC2HEX(RANDBETWEEN(0,42949),4),"-",DEC2HEX(RANDBETWEEN(0,42949),4),"-",DEC2HEX(RANDBETWEEN(0,42949),4))

#{"3B46-5733-08CA-9CBB-8CE7","0705-0EE0-19E7-7346-7A8B","0353-495E-7563-4EB0-4D96","94EF-2C7D-11F2-87D1-3174","48C5-5AB0-17E9-2EC8-A72E","1ADE-9257-9E37-06CD-4CDE","8B46-5D79-5FB4-348F-997D","4636-212A-4F09-6A06-1550","6140-3842-A65F-8CAF-803A","A7C0-7FC9-643B-7D46-9EC4","3150-444C-011E-983C-686E","5213-1014-1246-A662-0DA8","323D-8CA0-2C71-2B91-9502","9C72-8A34-613B-96B0-09FE","0239-16C7-4AB5-A112-1875","88FE-5673-46A6-5B92-6D34","7DC4-30EB-1425-092E-6E42","1CD0-7026-78DD-3F1A-4576","3030-3DCF-850E-1957-4EC8","721A-3B6B-842A-4AC7-7479","678D-01F5-831B-3B9A-87E6","1029-5C3D-1039-9E4F-8414","45DB-8FA0-3070-2CC8-0E46","1A37-58A8-8B4C-3855-96CA","2CC8-27BC-3074-8E26-5078","1737-A6A1-3FBB-3C73-79BC","0B25-6518-1C4D-4389-813D","8ADF-A42E-9CB0-31E0-A78A","557A-4AE7-9865-6A30-6D11","3F11-8B45-8D08-090A-4303","6006-4B38-29C1-1ABE-5380","A172-1C62-664C-7CA1-7306","683F-9498-94A2-9599-6EE6","4573-2A7F-46F9-7981-3BBF","18C0-38AD-93B1-21BF-1967","7C93-8B83-67D8-5026-9F31","64C7-0AB7-482C-4062-0364","58D7-5B58-338B-36BC-5C97","400A-8C50-5517-0C48-82F2","4331-835A-8C01-38F5-8ADD","1206-7B78-61A5-97E4-6D72","6519-4B11-543E-7A5D-78F1","4152-095A-9658-0934-4D1A","9523-763D-0B66-92E8-A7AE","4C5B-8A0A-4321-90A9-49DE","49C4-98D3-2414-702D-1202","8AFC-04D2-0A4F-2FAB-8195","7C21-9DBA-9EF8-6E60-525F","0F36-29E0-7BC6-993B-3D6C","3865-7B12-6356-5712-A1DA","38D6-351E-1738-5EB3-A04F","447D-8616-87E2-17A0-678C","9ED8-402E-A33E-3E7A-8875","26FD-2AC3-1A0F-7405-51D8","4B76-30BB-6E24-8BAE-0A11","4389-4C8C-1EE3-86A1-1174","036E-1907-9A03-93F4-44CC","805F-5D1B-303A-6AA0-A302","10DC-484C-1C13-5C42-9B5D","A75F-310D-0184-45D2-A5A8","8300-1DDB-1E3A-85EE-0DCC","16AD-9B42-1D5F-3E2C-226D","67C2-3DC3-46A1-74DC-538B","06FF-8D42-4056-211D-8109","8701-058F-019F-89AD-733D","8467-4E03-422E-157F-45E6","2C17-A125-9A6A-3434-26F3","0B4B-09F9-050C-2568-4F43","83D7-0628-5053-12FE-4178","9C07-5D08-0BC3-689E-46B0","7C5F-51CD-A79C-913F-02C3","8EFA-8CEA-1931-9323-A5C0","8F93-3A6D-0CD7-57E7-9697","74D1-27B9-9BCB-1492-2E8C","73AB-0F50-A785-30A6-7ABC","1F9C-734E-162E-9B57-5C30","6E52-7A3D-8CC9-7332-8B73","6356-7D92-71E2-998E-7EA3","08F1-A05F-00B5-532C-83B7","4274-7E66-3071-06A4-A2F8","0F93-94F5-90BE-9B51-848D","120C-8D5D-68CE-4652-4029","3AEA-6DFF-52BE-A28D-3192","6D35-3000-09F7-835C-2838","52AD-5CBB-1BF6-52AF-5B72","583B-0BE0-552B-7257-2804","509E-26DC-79AC-930E-A2F1","0426-06E9-708D-58BB-1133","0E3C-5425-577A-5F2D-8739","0E71-65B4-3500-5B6B-A154","235C-592F-5BCE-505F-656B","4CC1-77EA-36F5-0102-9CAC","0EA7-7B06-7EA9-6B10-2C5C","8A05-9FAF-7024-A630-2A72","A2C1-4200-0DE9-7B69-5973","39A4-3C23-0627-4F55-64BA","99F1-3D5D-354B-8082-85E1","52D1-721C-56A9-1FC6-8177","355B-A237-18AF-78F9-400E","43D1-5901-0758-754E-87C0","1F4F-5E25-5C30-3763-9479","9370-3525-6061-3513-24DB","3321-8071-1F20-6AF2-0FAE","6B93-0FE8-8F08-5C11-5F2A","3178-50E5-4294-4722-9B2F","8718-8B1F-5D8B-3F53-3C1A","2DEC-451E-5CF4-3C53-532A","7BC1-57FE-7724-2C7E-6C14","01C7-3EA4-2ED4-8BC4-5F06","4585-88F4-4488-4F27-5186","74CE-7A3F-7AE5-13E4-530C","1FBF-1965-A58F-42D8-8A6F","0CC9-8FA0-203D-A3FD-7896","2122-87D1-05F8-7AB5-971E","3FF9-58E3-2683-9165-1FF8","78C2-1CA9-1F38-50FC-76CF","1685-665C-336E-16C9-02F4","0ACB-A5D1-4DDC-2971-A1F0","3C7C-25C7-2871-200E-6EC5","0637-52A6-0C77-01A4-639D","03BB-29A3-7978-2308-9142","454B-573F-665B-11EC-6BFE","0F98-05E1-4092-A264-354E","77E1-A671-52F7-76A4-A298","1BFD-9982-29D6-8AAE-1209","45AF-9999-3C71-7366-2CE3","9681-4D4E-6FF9-26BC-3B86","0E12-7BAA-8FA2-1EB6-6A98","56A9-01A2-7061-A0E4-4354","4595-58E4-3161-46B5-62D1","15A8-1BD1-330D-985F-02BA","189A-41B0-02C3-90EA-3F65","80B4-1157-96FB-47CC-7DD1","55F5-1AA4-3328-5D55-76FD","4960-4D4A-5193-24C6-1861","2138-2575-991A-8357-0EED","63CB-5ED1-500D-0E6C-0689","2A10-3F4B-85C6-1F8F-7D7E","3B77-3544-80E7-2BDF-4AD6","0D42-5BAD-0CA9-A138-2C4C","3674-40B5-96E4-85CA-2479","96F9-9EB7-2323-5AAC-0095","3B37-9078-9F3A-3264-3BE0","77A7-8042-9FA3-4636-8578","5B18-265F-3DC4-0D6A-77B7","6563-4543-9875-9AA9-68A2","4BC3-18FA-6635-8FA0-6311","8DC2-4057-742E-A786-482D","0D57-8708-3357-4D0C-2145","068E-5579-A33E-0472-0C37","3DED-02EA-06DF-2E76-7789","722C-9D22-9924-426E-2EDB","9F24-6E0E-25FF-5045-95DF","21D4-09F1-855C-7A36-794A","5B2B-598A-9B26-10CB-1620","6FF8-9DFF-A099-2C0C-9680","2914-2AED-6526-3EF7-4816","310D-493B-39FA-9EB9-1D1D","1A7E-1AA8-3DBF-6805-2A06","08DD-9087-1C2F-4A93-3B9D","4B82-8DC1-0FF3-7DC9-8621","2762-3591-1D9A-6D46-8479","57C7-42EC-1558-1DE9-5DA1","7776-73AE-938D-6B5B-6520","8521-63E5-2092-4851-58AE","623D-9C50-6E10-1838-68CC","9B54-63FE-001E-0AC8-1051","368F-1342-4956-8120-0AB2","0FDA-7C1D-6F05-6F4F-9F39","31C1-1FBE-76DE-0625-4544","0EB3-0AC1-84A8-6BE5-7893","13B6-6CC9-8CE7-5C54-2B38","409A-7BC0-46ED-14A1-58B3","89DE-2A84-2712-5FAB-4D5E","7FF8-3F47-24EB-7239-2035","74C9-5C96-8A1E-9D0D-8F29","5CD4-7CCD-48AC-4821-950C","8542-6BCE-1D8D-5E3A-25B7","796C-960B-2AF3-2E86-6CA8","6A31-058A-6C18-0F81-9C3B","2753-0FAB-93B4-4B4B-3A73","6205-7C34-8BB2-227E-4159","4029-9DA1-45A2-48AB-2284","A01D-82F0-86B2-10F1-0D21","477B-3F78-0EBB-9FA8-751A","3395-7E86-92F3-8391-0171","5D2E-08CC-5408-6AFA-41E1","9F7F-5910-312C-8057-3BC7","37DC-9BAE-1628-9519-24A0","5513-71B7-7598-5922-7129","46FE-369C-3A03-5C2E-29C6","3179-A474-8815-5BF1-948D","370A-6964-3E0A-0712-527C","80D8-4243-69CD-6758-95BD","27E3-7D37-8A8A-7022-87F6","920D-8887-8A14-568A-1BA1","0A68-08F8-8D76-6FEC-77E2","4DDD-8753-9567-729D-68AE","7AD3-23DF-9CD9-A375-4DF3","0D46-41FF-3BCB-92BA-92CA","A7A8-2C02-9EEF-6591-410F","0E8E-2B10-060E-0642-0C9A","8D75-3E33-73D9-627D-7A24","8223-26FA-5E47-63E0-188C","0BD9-37C8-06AB-3D80-8D5D","7EC2-3D07-15BD-248B-14B0","7340-08A9-2114-4143-8F22","9BED-7C58-9E50-A3FC-9399","513D-3CD4-1420-109B-57C3","3142-3584-8D98-291E-58CA","77E8-05E2-A758-9413-4329","289A-759A-A77F-6DA7-3AFE","A501-7087-44F2-659E-580A","9AA0-4684-568B-30E3-1B2F","1620-0491-4A3C-0FC4-3183","81D3-5FF0-8F43-19AC-3677","930B-3820-3232-1CFD-240F","A017-746D-4B98-3BA7-23E7","80D0-60B3-78A6-9549-5532","8FC5-2ECD-7C53-8E18-51CB","3A95-963E-170F-6352-0103","A269-147D-0CF6-86E6-5483","539A-4D60-5260-5D94-2629","862A-665C-0426-526B-0C87","0CFF-4E90-3FAB-3151-1818","42F3-94EC-6108-7BEF-911F","3968-7D9A-9EBB-3FD0-755F","894D-2B74-25A0-41A9-1A6B","919F-6B35-2BB3-3D76-00A4","55F1-39C3-008B-8D51-1E65","7EC8-8DA0-06F5-1796-36C4","0595-8B6E-9175-2553-4BD2","A47B-7E32-9363-5847-86D9","1250-04E3-7592-50A6-A603","A091-6939-5FB9-8BE8-6660","2D5C-9621-6BB8-7721-9D25","43B1-050A-3AA0-7BF3-7838","523C-00B6-6950-6B65-3C25","96ED-405F-666B-1376-16D9","1D61-10D5-0FB9-A5CD-0A8D","773C-9655-8320-9ABE-73B1","4868-0A9B-21C4-2A9A-A318","3CF8-7BFD-9E3F-672F-8C95","0AE7-92FC-4AF5-688D-96F0","8630-0EFF-5800-8C9A-44A5","5660-A076-188C-A74E-90C7","0D9D-461B-21B3-86EF-41C0","9C21-A33D-4A67-599C-87E8","938C-81F4-3FD2-93CF-55AE","7AD2-5A5C-9AE3-6291-4923","39B4-3042-9D59-0C1C-8690","81A8-7E04-0CF9-17F1-8AC0","3539-9C0C-4091-90B4-3114","18A1-973C-733F-A2F5-463B","3A32-5A4C-2CEE-1510-4948","7CDD-8CB8-4CCD-54ED-9C51","438C-92FB-20F3-9BF7-7B2A","4AB8-4F40-688E-1C77-955E","4E57-8050-2631-1833-08D2","5817-256A-40FB-8F1C-07DF","5B32-6155-4B58-6E71-85A5","3E2F-65A0-72B0-92F4-3E99","15B6-4F71-3984-99FC-09FF","72A4-9BA4-57D8-0A60-227D","05FC-350B-5132-35AA-1273","1BD2-09F6-51E4-780D-1EAB","0BDC-5C56-8FBE-9AF8-4C79","4FD5-2FA1-206E-33A8-8AFF","5219-6453-0B85-1FF0-9EBD","2AA9-6188-A186-0378-8307","8225-5E7A-A05B-4498-073C","5801-886D-56E2-5601-815B","42B6-8FBE-2769-86BE-4FA0","948B-73A7-78D6-9354-A0C1","4DCA-6005-09A0-1E8E-9D8F","8316-4F69-28D6-6C23-0FD4","1785-28A3-28CA-5034-994A","5E18-7501-6BCB-4816-4DF0","678A-9624-3448-4B17-9A2E","020B-5999-7B89-8101-229B","7ACA-4746-0E13-9CF9-6E06","8B24-6F5C-02D2-6733-5608","5048-95CA-9B46-423D-9EDD","51BA-9791-1934-4E2D-03BB","8DF4-09B7-6136-069B-9755","5EA5-0A62-4303-3CB9-9420","21E7-1EEA-829D-3E19-4C93","2AFD-961E-0481-619D-83E6","67D4-1B36-04D1-1461-1E78","7270-4D29-6944-8AA6-36E5","80E2-10BC-2A29-1489-7DF0","7CD3-9624-77A9-5E47-7A83","2E93-5786-4C43-28DB-03E9","2E78-6E9B-75D3-4B9F-8755","62A8-79D4-1168-2F30-6616","491C-9640-8256-A1E4-8EDF","8DDB-3BB2-9036-357B-7F6F","9BE4-019D-3799-5549-96C9","945C-48B1-1984-69DD-7542","4A75-2A8D-2C02-0413-1943","5F74-3B2C-A261-63F0-135F","5A98-63C6-A48E-09A9-1537","3789-62D3-32CB-6A49-7076","A092-13A5-2577-07A1-88C5","623A-7456-2182-85AB-8114","5CB0-89FE-37F0-22EC-63F8","05C6-3AA6-55DD-2648-5E5D","252D-5092-0A54-8B2F-5C27","2E83-0339-95FF-4350-7C95","052B-5BA0-8320-A4AC-3456","7DB1-844D-9202-721E-6F0C","5A7D-396F-814F-3441-24DD","515A-11F1-110A-0CFE-036F","596B-8CA0-0E25-9D99-6642","895E-65FA-833C-36B2-3C1A","340A-2320-263C-7CAA-956A","853A-1B1D-88A2-71FF-1BA2","2494-5CFD-A5E9-7EFE-76D8","269B-520B-561B-8BAF-0108","5A11-1785-26E1-0BF1-9C7E","A48B-5A1C-5B57-879E-5616","1662-0482-8F82-6678-5E42","24F6-155E-45F7-8A77-7999","8CC2-51D1-6FC5-5A86-95A0","A5F1-03E5-2B20-25EC-0D51","22A9-1836-72F3-7A39-52E1","36C9-9B25-5E80-896D-7151","7F25-536D-6BC3-8D60-4636","5A31-9375-A43D-638B-88E6","1E45-6A38-A644-3C4F-7251","699C-0CBA-1BA8-1D4E-610C","8B4B-75FC-8FD4-7317-4A00","58F9-1F0F-6421-A459-473F","2DBC-1175-2254-20D0-52CF","20EC-A05A-1273-0865-09A6","8BD6-8366-829A-775A-8521","12F4-0499-4AEF-4422-3ED4","A621-14DE-2B9F-27C6-A07D","9A25-707E-692F-5845-10C2","78B0-55BA-97FB-A578-4459","1980-44EA-0682-20EB-4152","60CE-4EB6-9E62-29BA-913D","4175-50F0-21C3-1E80-15F7","14C0-3351-7113-30B5-2FF8","4EA5-A5EF-5C84-736B-94BB","A5FD-5504-6064-156D-9E43","5D18-A4F0-0525-5F5D-670B","4C99-2594-0E2A-6B3E-3EF3","914F-A3B3-1978-549B-6F94","64EB-2AC4-66A3-74DF-2426","A245-16C3-49F7-A436-8D56","8A40-21E0-A1A0-78AB-0770","061A-9247-A6BD-1124-6424","79EA-9930-51EA-65B6-7988","017E-09A4-9C59-289F-0245","44D4-47D3-A597-8FE1-683B","2B97-775A-1C65-4DE9-4E79","95FA-00D6-3DF6-07B3-94EC","5B7D-8C84-791B-5182-4874","2C85-6F24-5680-8DEE-20E8","4E74-42E1-505F-84AD-A2CA","8D28-129B-8CB9-7DD8-15A1","0509-3522-4895-6ABA-1AD4","2CC9-1CD7-4982-24EE-267C","4054-160A-46A7-8DAD-7375","1C2B-4A3D-13AC-850C-00B3","72E0-9D9F-49E3-8C9E-357F","5EE4-2607-98F6-0FBE-0179","0B8A-51E9-1509-454E-3AAC","0137-74C4-95C9-2735-3614","0AE4-7FD6-037A-29A5-23C3","8685-02DB-7DB0-0286-3A76","366F-4A2B-7B87-9A0A-0275","74FC-044B-50D3-4EA8-38A6","8507-44AE-40C4-87C0-9320","6A4A-696C-9075-29D6-1C5C","10E1-8381-0B93-6089-2099","6AA2-8EC0-5534-5879-5AF7","6B82-52E6-8FF7-1B8D-6A3F","70AC-09A1-9D91-998B-4487","24B9-036C-6AE6-6676-0774","8256-4F0A-7573-9112-6F71","4517-0989-5BCE-46E2-1495","2B06-54A2-9D0E-766F-1C3F","7FD2-4B34-73D8-7B54-6ECE","534D-444F-5DCD-2E57-6ABB","1612-522B-12C0-45B3-22EB","7976-1C5F-10F2-4666-A1E3","9D64-9233-5898-73A9-9639","66BB-674F-0569-9A06-454C","6F1D-6482-5E48-4DE7-749B","9C64-442B-940C-8CBB-311E","427C-A0C3-9508-2525-2B8F","461A-6499-64BB-498E-25DD","0113-02FB-1A07-77DC-93DB","5CCF-6C94-39B7-99B8-8ACC","19A6-16B6-2122-36C2-6022","81E3-4BB5-6056-1F19-6323","8AA5-4382-37E4-85C2-16D3","93BA-612C-43F8-6F75-1C8D","3413-7990-5877-9DDA-6B2E","2AFB-5567-0E9F-8E34-52D8","48D0-8144-4C15-27FF-219E","8D73-3235-3844-5C8F-071A","706C-6558-4BFB-0FF2-5AB7","05C5-16FC-3CCF-1A5C-7182","71AD-948A-8DB1-6284-458A","A434-76FE-92EC-697F-3FB6","9731-5C3A-6D16-4813-8510","07D8-4BFC-98D6-A362-1F70","0F0C-A6C0-1C30-052E-24FE","8D01-46C9-490A-3A49-84F4","A245-9B06-A509-6DF0-601C","2FB0-183C-41D3-1C46-03F0","63B4-76F6-48A2-7F65-A508","2FC5-5133-A2A4-5630-3665","0B83-0BD5-0E03-2D09-0AC8","1B09-8504-4F58-3252-261C","9F5C-13F6-284D-09B2-7B9E","9F94-90C2-167F-A487-8546","9089-5DA7-802D-8A66-737B","8DDB-5549-5CC7-0E01-4A82","A1F3-673F-4C5F-2822-618B","1B96-1D08-5F27-857E-2702","6FF3-4936-638C-17CD-95BD","97C5-18CE-619E-3194-522F","82F9-3784-8BF4-672D-3860","A630-1F02-9AC9-0FFA-0BF2","A3AB-6DD7-63CE-3E54-2EBC","1E46-2895-0D02-2710-3DA5","6C64-0ED9-2947-2089-681D","3E61-0ACA-36BD-4417-3E91","5034-9E57-2D3D-418D-592C","2A55-4E89-45D6-9B07-3116","7887-27B9-5BA5-88D8-6739","296C-72CD-80D0-6117-62FC","3A0A-4C13-945C-4702-A52F","6309-4E22-1070-3653-6FE9","0190-321C-615C-3EF8-2D27","2C59-409D-9173-41C8-71A4","073B-851C-1A86-1669-0D68","00CA-856A-A5E2-89C7-21B8","5FA4-3480-0ABD-445C-74F2","2506-269F-055D-0E51-7111","6F47-A788-518D-69EC-1000","12EA-1275-45E7-70E7-8496","A35D-A3CB-5C88-81B5-42AB","0B1F-3425-08D8-751C-7F8E","9319-2D0F-64C1-192F-2C69","8EEC-8601-070A-4E0F-74A3","8CBF-5B7E-4EA3-3235-1B4F","00F4-785B-6E87-8348-598D","773A-4D38-444C-1EA3-5A88","5D7B-8454-0518-8061-06ED","A1A4-3A06-A58F-512E-84FA","768E-5158-4CFB-4D56-1765","6A1E-237F-066B-4E77-939E","0EF3-A428-873A-4F21-9518","575F-976B-5F4F-4F56-98BD","752D-2DA1-873D-2323-3F65","1CFB-213A-836D-87E2-A60B","895E-075D-7D79-691B-08B5","1537-5AFD-3911-31C7-3486","7FED-1267-13FF-00E5-4822","6373-A0E2-0819-0AEF-1FEC","2092-77F9-30BF-836C-9728","37F9-A0F5-31AA-8C59-2170","484E-285B-3E80-56CA-0433","4D64-9B44-7201-3B91-95E6","99BE-A1A4-857F-59CE-6E73","9BCC-1453-0230-67C0-2EDA","8D58-202F-84AE-47E7-4081","934C-8F70-607C-7B1B-457C","1520-17D6-0BE9-8B58-8665","9EE4-79E7-2063-4823-14E8","60F8-87B7-1627-A2B4-7214","6FB4-1A2F-8555-1324-6890","95A9-01A1-9FCB-A231-378A","28AA-2174-01FC-44A2-1751","2559-8756-0D9C-29C8-2D06","9CBC-171F-232F-794A-72ED","9666-7EB1-3607-919F-17C2","32C8-0407-987D-8C57-89E9","32D6-6D58-1126-7DD1-11A0","4338-0E75-2F06-560C-A21F","2103-12AA-1D03-643D-0CA7","9537-3E7D-38AC-23EA-1105","2634-7023-855D-0AC8-4C86","91B9-14A6-45C5-1FBE-24B6","3BAB-7BE9-744C-A6A0-5364","0556-6DBF-66CF-1409-642A","A76F-2C4A-46A8-95B3-78CF","94BB-6E9D-34BC-4F62-7599","4152-6DE5-6AE1-583A-A6CA","6789-4BDB-7346-A557-54FD","A119-4F5E-1557-7A4C-2B23","0541-5B85-12B7-8229-0566","50FE-2AA5-43EE-2A09-81FC","2C9D-6372-20F1-4D90-0457","4219-5D4D-0FA9-5A30-097C"};
