/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.vollyball.panels;

import com.vollyball.bean.Player;
import com.vollyball.controller.Controller;
import com.vollyball.dao.TeamDao;
import com.vollyball.enums.Rating;
import com.vollyball.enums.Skill;
import java.awt.AWTException;
import java.awt.Robot;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JTextField;

/**
 *
 * @author nishant.vibhute
 */
public class PanRallyEvaluationRow extends javax.swing.JPanel {

    Robot robot;
    PanRallyLiveEvaluation p;
    TeamDao teamDao = new TeamDao();
    int num = 0, id = 0;
    String skill;
    boolean isDetailed;
    public int playerId = 0;
    LinkedHashMap<Integer, String> detailsValues = new LinkedHashMap<Integer, String>();
    LinkedHashMap<String, Integer> chestNumPlayerId = new LinkedHashMap<String, Integer>();
    LinkedHashMap<Integer, String> playerIdChestNum = new LinkedHashMap<Integer, String>();
    public boolean isAddClicked = false, isSubClicked = false, isrowadded = false;
    String score;

    /**
     * Creates new form PanRallyEvaluationRow
     *
     * @param p
     */
    public PanRallyEvaluationRow(PanRallyLiveEvaluation p) {
        initComponents();
//        ((JLabel) cmbChest.getRenderer()).setHorizontalAlignment(JLabel.CENTER);
        ((JLabel) cmbScore.getRenderer()).setHorizontalAlignment(JLabel.CENTER);
        this.p = p;
        num = p.rallyRow;
        try {
            robot = new Robot();
        } catch (AWTException ex) {
            Logger.getLogger(PanRallyLiveEvaluation.class.getName()).log(Level.SEVERE, null, ex);
        }

        for (Map.Entry<Integer, Player> entry : Controller.panMatchSet.rallyPositionMap.entrySet()) {
            Player player = entry.getValue();
            chestNumPlayerId.put(player.getChestNo(), player.getId());
            playerIdChestNum.put(player.getId(), player.getChestNo());
        }
        for (Rating dir : Rating.values()) {
            cmbScore.addItem(dir.getId());
        }

    }

    public void setValues(String skill, Integer PlayerId, int score, int id, LinkedHashMap<Integer, String> detailsValues) {

        txtSkill.setText(skill);
//        cmbChest.setSelectedItem(chestNo);
        playerId = PlayerId;
        txtChestNum.setText(playerIdChestNum.get(PlayerId));
        cmbScore.setSelectedItem(score);
        this.id = id;
        this.score = "" + score;
        this.detailsValues = detailsValues;
        this.skill = skill;

    }

    public void hideButton() {
        lblAddNew.setIcon(null);
    }

    public void hideMinusButton() {
        lblSub.setIcon(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtSkill = new javax.swing.JTextField();
        cmbScore = new javax.swing.JComboBox();
        lblAddNew = new javax.swing.JLabel();
        txtChestNum = new javax.swing.JTextField();
        lblSub = new javax.swing.JLabel();
        lblDetail = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        txtSkill.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        txtSkill.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtSkill.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(54, 78, 108)));
        txtSkill.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSkillKeyReleased(evt);
            }
        });

        cmbScore.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        cmbScore.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));
        cmbScore.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(54, 78, 108)));
        cmbScore.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbScoreItemStateChanged(evt);
            }
        });

        lblAddNew.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAddNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/vollyball/images/icons8-plus-20.png"))); // NOI18N
        lblAddNew.setToolTipText("Add New Row");
        lblAddNew.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblAddNewMouseClicked(evt);
            }
        });

        txtChestNum.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        txtChestNum.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtChestNum.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtChestNum.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtChestNumKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtChestNumKeyReleased(evt);
            }
        });

        lblSub.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblSub.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/vollyball/images/icons8-minus-20.png"))); // NOI18N
        lblSub.setToolTipText("Remove Row");
        lblSub.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblSubMouseClicked(evt);
            }
        });

        lblDetail.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblDetail.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/vollyball/images/icons8-view-details-20.png"))); // NOI18N
        lblDetail.setToolTipText("Detail Analysis");
        lblDetail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblDetailMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(txtSkill, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(txtChestNum, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(cmbScore, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(lblAddNew, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(lblSub, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(lblDetail, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cmbScore)
            .addComponent(lblAddNew, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lblSub, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtSkill, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtChestNum, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(lblDetail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void lblAddNewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblAddNewMouseClicked
        // TODO add your handling code here:
        isAddClicked = true;
        p.addToPosition();

    }//GEN-LAST:event_lblAddNewMouseClicked

    private void txtSkillKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSkillKeyReleased
        // TODO add your handling code here:
        if (num == 0) {
            SimpleDateFormat formatterTime = new SimpleDateFormat("HH:mm:ss");
            Date time = new Date();
            p.startTime = formatterTime.format(time);
            p.lblRallyStartTime.setText(p.startTime);
        }

        JTextField comp = (JTextField) evt.getSource();
        char text = evt.getKeyChar();
        setValue(comp, text);

    }//GEN-LAST:event_txtSkillKeyReleased

    private void cmbScoreItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbScoreItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            String item = String.valueOf(evt.getItem());
            if (!evt.getItem().equals("")) {
                if (!p.isInserted) {
                    if (p.evaluationType == 2) {
                        isDetailed = true;
                        Controller.panMatchSet.panRallyShow.removeAll();
                        PanRallyPostEvaluation panRallyPostEvaluation = new PanRallyPostEvaluation(item, this, skill, txtChestNum.getText(), this.detailsValues);
                        Controller.panMatchSet.panRallyShow.add(panRallyPostEvaluation);
                        Controller.panMatchSet.panRallyShow.validate();
                        Controller.panMatchSet.panRallyShow.repaint();
                    } else {
                        setRallyRow(item);
                    }
                } else {
//                setRallyRow(item);

                }
            }
        }

    }//GEN-LAST:event_cmbScoreItemStateChanged

    private void txtChestNumKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtChestNumKeyPressed
        // TODO add your handling code here:

    }//GEN-LAST:event_txtChestNumKeyPressed

    private void txtChestNumKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtChestNumKeyReleased
        // TODO add your handling code here:
        String item = txtChestNum.getText();
        if (item.length() > 1) {

            boolean isContain = false;
            for (Map.Entry<Integer, Player> entry : Controller.panMatchSet.rallyPositionMap.entrySet()) {
                if (entry.getKey() != 7) {
                    Player p = entry.getValue();
                    if (p.getChestNo().equals(item)) {
                        isContain = true;
                        break;
                    }
                }
            }

            if (isContain) {
                playerId = chestNumPlayerId.get(item);
                robot.keyPress(KeyEvent.VK_TAB);
            } else {
                txtChestNum.setText("");
            }
        }
    }//GEN-LAST:event_txtChestNumKeyReleased

    private void lblSubMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblSubMouseClicked
        // TODO add your handling code here:
        isAddClicked = true;
        p.removePosition();

    }//GEN-LAST:event_lblSubMouseClicked

    private void lblDetailMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblDetailMouseClicked
        // TODO add your handling code here:
        Controller.panMatchSet.panRallyShow.removeAll();
        isDetailed = true;
        PanRallyPostEvaluation panRallyPostEvaluation = new PanRallyPostEvaluation("" + this.score, this, skill, txtChestNum.getText(), this.detailsValues);
        Controller.panMatchSet.panRallyShow.add(panRallyPostEvaluation);
        Controller.panMatchSet.panRallyShow.validate();
        Controller.panMatchSet.panRallyShow.repaint();
    }//GEN-LAST:event_lblDetailMouseClicked

    public void setRallyRow(String item) {
        if (p.evaluationType == 2) {
            Controller.panMatchSet.panRallyShow.removeAll();
            Controller.panMatchSet.panRallyShow.add(p);
            Controller.panMatchSet.panRallyShow.validate();
            Controller.panMatchSet.panRallyShow.repaint();
            Controller.panMatchSet.panButton.setVisible(true);
        }
        switch (item) {

            case "1":
                if (p.scoreAddedOf.equalsIgnoreCase("none")) {
                    Controller.panMatchSet.opponentScore++;
                    p.scoreAddedOf = "opponent";
                } else {
                    if (p.scoreAddedOf.equalsIgnoreCase("home")) {
                        Controller.panMatchSet.homeScore--;
                        Controller.panMatchSet.opponentScore++;
                        p.scoreAddedOf = "opponent";
                        p.lblResult.setText(Controller.panMatchSet.homeScore + " : " + Controller.panMatchSet.opponentScore);
                    } else {

                        p.lblResult.setText(Controller.panMatchSet.homeScore + " : " + Controller.panMatchSet.opponentScore);
                    }
                }
                p.lblResult.setText(Controller.panMatchSet.homeScore + " : " + Controller.panMatchSet.opponentScore);
                SimpleDateFormat formatterTime = new SimpleDateFormat("HH:mm:ss");
                Date time = new Date();
                p.endTime = formatterTime.format(time);
                p.lblRallyEndTime.setText(p.endTime);
                break;
            case "5":
                if (skill.equals(Skill.Service.getType()) || skill.equals(Skill.Attack.getType()) || skill.equals(Skill.Block.getType()) || skill.equals(Skill.OP.getType())) {
                    if (p.scoreAddedOf.equalsIgnoreCase("none")) {
                        Controller.panMatchSet.homeScore++;
                        p.scoreAddedOf = "home";
                    } else {
                        if (p.scoreAddedOf.equalsIgnoreCase("home")) {

                            p.lblResult.setText(Controller.panMatchSet.homeScore + " : " + Controller.panMatchSet.opponentScore);
                        } else {
                            Controller.panMatchSet.opponentScore--;
                            Controller.panMatchSet.homeScore++;
                            p.scoreAddedOf = "home";
                            p.lblResult.setText(Controller.panMatchSet.homeScore + " : " + Controller.panMatchSet.opponentScore);
                        }
                    }

                    p.lblResult.setText(Controller.panMatchSet.homeScore + " : " + Controller.panMatchSet.opponentScore);
                    SimpleDateFormat formatterTime1 = new SimpleDateFormat("HH:mm:ss");
                    Date time1 = new Date();
                    p.endTime = formatterTime1.format(time1);
                    p.lblRallyEndTime.setText(p.endTime);
                } else {
                    if (!p.isInserted) {
                        if (!isrowadded) {
                            isrowadded = true;
                            p.refresh();
                            robot.keyPress(KeyEvent.VK_TAB);
                        }
                    }
                }
                break;
            default:
                if (!p.scoreAddedOf.equalsIgnoreCase("none")) {
                    if (p.scoreAddedOf.equalsIgnoreCase("home")) {
                        Controller.panMatchSet.homeScore--;
                        p.lblResult.setText(Controller.panMatchSet.homeScore + " : " + Controller.panMatchSet.opponentScore);
                    } else {
                        Controller.panMatchSet.opponentScore--;
                        p.lblResult.setText(Controller.panMatchSet.homeScore + " : " + Controller.panMatchSet.opponentScore);
                    }
                    p.scoreAddedOf = "none";
                }
                if (!p.isInserted) {
                    if (!isrowadded) {
                        isrowadded = true;
                        p.refresh();
                        robot.keyPress(KeyEvent.VK_TAB);
                    }
                }
        }
    }

    public void setValue(JTextField txt, char key) {

        switch (("" + key).toUpperCase()) {
            case "S":
                txt.setText("");
                txt.setText(Skill.Service.getType());
                skill = Skill.Service.getType();
                robot.keyPress(KeyEvent.VK_TAB);
                break;
            case "A":
                txt.setText("");
                txt.setText(Skill.Attack.getType());
                skill = Skill.Attack.getType();
                robot.keyPress(KeyEvent.VK_TAB);
                break;
            case "B":
                txt.setText("");
                txt.setText(Skill.Block.getType());
                skill = Skill.Block.getType();
                robot.keyPress(KeyEvent.VK_TAB);
                break;
            case "E":
                txt.setText("");
                txt.setText(Skill.Set.getType());
                skill = Skill.Set.getType();
                robot.keyPress(KeyEvent.VK_TAB);
                break;
            case "R":
                txt.setText("");
                txt.setText(Skill.Reception.getType());
                skill = Skill.Reception.getType();
                robot.keyPress(KeyEvent.VK_TAB);
                break;
            case "D":
                txt.setText("");
                txt.setText(Skill.Defence.getType());
                skill = Skill.Defence.getType();
                robot.keyPress(KeyEvent.VK_TAB);
                break;
            case "O":
                txt.setText("");
                txt.setText(Skill.OP.getType());
                skill = Skill.OP.getType();
                cmbScore.setSelectedItem(5);
                break;
            case "T":
                txt.setText("");
                txt.setText(Skill.TF.getType());
                skill = Skill.TF.getType();
                cmbScore.setSelectedItem(1);
                break;
            default:
                txt.setText("");
                cmbScore.setSelectedIndex(0);
                txtChestNum.setText("");
                break;
        }

    }

    public LinkedHashMap<Integer, String> getDetailsValues() {
        return detailsValues;
    }

    public void setDetailsValues(LinkedHashMap<Integer, String> detailsValues) {
        this.detailsValues = detailsValues;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JComboBox cmbScore;
    private javax.swing.JLabel lblAddNew;
    private javax.swing.JLabel lblDetail;
    private javax.swing.JLabel lblSub;
    public javax.swing.JTextField txtChestNum;
    public javax.swing.JTextField txtSkill;
    // End of variables declaration//GEN-END:variables
}
