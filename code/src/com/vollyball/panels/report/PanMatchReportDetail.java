/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.vollyball.panels.report;

import com.vollyball.bean.MatchBean;
import com.vollyball.bean.MatchSet;
import com.vollyball.bean.Player;
import com.vollyball.bean.RallyEvaluation;
import com.vollyball.bean.RallyEvaluationSkillScore;
import com.vollyball.bean.TotalRallies;
import com.vollyball.controller.Controller;
import com.vollyball.dao.MatchDao;
import com.vollyball.dao.RallyDao;
import com.vollyball.dao.TeamDao;
import com.vollyball.enums.Skill;
import com.vollyball.panels.PanMatchReportHeading;
import com.vollyball.panels.PanRallyReport;
import com.vollyball.panels.PanRallyReportExt;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridLayout;
import java.awt.event.ItemEvent;
import java.awt.print.Book;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author nishant.vibhute
 */
public class PanMatchReportDetail extends javax.swing.JPanel {

    RallyDao rallyDao = new RallyDao();
    List<Component> printComponent = new ArrayList<>();
    MatchDao matchDao = new MatchDao();
    LinkedHashMap<String, Integer> teamsMap;
    LinkedHashMap<Integer, String> teamsMapbyId;
    int matchEvaluationId;
    int matchId;
    LinkedHashMap<Integer, Player> playerMap = new LinkedHashMap<Integer, Player>();
    List<TotalRallies> rallyList = new ArrayList<>();
    TeamDao teamDao = new TeamDao();

    /**
     * Creates new form PanMatchReportDetail
     */
    public PanMatchReportDetail(int matchid) {
        initComponents();
        this.matchId = matchid;
//        jScrollPane2.setHorizontalScrollBarPolicy(HORIZONTAL_SCROLLBAR_NEVER);
        panRallyList.setLayout(new GridLayout(2, 1));

        MatchBean team = matchDao.getMatchesById(Controller.competitionId, matchid);
        teamsMap = new LinkedHashMap<>();
        teamsMapbyId = new LinkedHashMap<>();
        int team1id = team.getTeam1();
        int team2id = team.getTeam2();

        teamsMap.put(team.getTeam1name(), team1id);
        teamsMap.put(team.getTeam2name(), team2id);
        teamsMapbyId.put(team1id, team.getTeam1name());
        teamsMapbyId.put(team2id, team.getTeam2name());
        cmbTeam.addItem(team.getTeam1name());
        cmbTeam.addItem(team.getTeam2name());


    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cmbTeam = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        cmbSet = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        lblPrint1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        panRallyList = new javax.swing.JPanel();

        setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel1.setText("Evaluating Team :");

        cmbTeam.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select" }));
        cmbTeam.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbTeamItemStateChanged(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel2.setText("SET : ");

        cmbSet.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "1", "2", "3", "4", "5" }));

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/vollyball/images/button_report.png"))); // NOI18N
        jLabel3.setToolTipText("Get Report");
        jLabel3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
        });

        lblPrint1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        lblPrint1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPrint1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/vollyball/images/printer.png"))); // NOI18N
        lblPrint1.setText("Print");
        lblPrint1.setToolTipText("Print This Page");
        lblPrint1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblPrint1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbTeam, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbSet, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblPrint1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPrint1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(cmbTeam, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE))
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbSet, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        panRallyList.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout panRallyListLayout = new javax.swing.GroupLayout(panRallyList);
        panRallyList.setLayout(panRallyListLayout);
        panRallyListLayout.setHorizontalGroup(
            panRallyListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1012, Short.MAX_VALUE)
        );
        panRallyListLayout.setVerticalGroup(
            panRallyListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 650, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(panRallyList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void lblPrint1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblPrint1MouseClicked
        // TODO add your handling code here:
        if(printComponent.size()!=0)
        {
        lblPrint1.setVisible(false);

        printComponenet(panRallyList);
        lblPrint1.setVisible(true);
        }
        else{
            JOptionPane.showMessageDialog(this, "Can Not Print this document");
        }
    }//GEN-LAST:event_lblPrint1MouseClicked

    private void cmbTeamItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbTeamItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED) {

        }
    }//GEN-LAST:event_cmbTeamItemStateChanged

    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
        // TODO add your handling code here:
        List<Player> playerList = new ArrayList<>();
        printComponent = new ArrayList<>();
panRallyList.removeAll();
rallyList = new ArrayList<>();

        if (("" + cmbTeam.getSelectedItem()).equalsIgnoreCase("select")) {
            JOptionPane.showMessageDialog(this, "Please Select Team", "Error", 2);
        } else if (("" + cmbSet.getSelectedItem()).equalsIgnoreCase("select")) {
            JOptionPane.showMessageDialog(this, "Please Select Set Number", "Error", 2);
        } else {
            int teamId = teamsMap.get(cmbTeam.getSelectedItem());
            int set = Integer.parseInt("" + cmbSet.getSelectedItem());

            playerList = teamDao.getTeamPlayers(teamId);
            for (Player p : playerList) {
                playerMap.put(p.getId(), p);

            }

            matchEvaluationId = matchDao.getMatchEvaluationTeamId(matchId, teamId);
            MatchSet ms = matchDao.getMatchSet(set, matchEvaluationId);

            if (ms.getId() != 0) {
                

                PanMatchReportHeading p = new PanMatchReportHeading(ms, teamsMapbyId, playerMap);

                List<RallyEvaluation> rallies = rallyDao.getRalliesList(ms.getId());

                for (RallyEvaluation r : rallies) {
                    RallyEvaluation re = rallyDao.getRally(r.getRallyNum(), ms.getId(), teamId);

                    PanRallyReport pnBut = new PanRallyReport();

                    pnBut.lblRallyNum.setText("" + re.getRallyNum());
                    pnBut.lblStartTime.setText(": " + re.getStartTime());
                    pnBut.lblEndTime.setText(": " + re.getEndTime());
                    pnBut.lblScore.setText(re.getHomeScore() + ":" + re.getOpponentScore());
                    pnBut.pos1.setText(re.rallyPositionMap.get(1).getChestNo());
                    pnBut.pos2.setText(re.rallyPositionMap.get(2).getChestNo());
                    pnBut.pos3.setText(re.rallyPositionMap.get(3).getChestNo());
                    pnBut.pos4.setText(re.rallyPositionMap.get(4).getChestNo());
                    pnBut.pos5.setText(re.rallyPositionMap.get(5).getChestNo());
                    pnBut.pos6.setText(re.rallyPositionMap.get(6).getChestNo());

                    TotalRallies t = new TotalRallies();
                    t.setType("new");
                    t.setPnPanRallyReport(pnBut);
                    rallyList.add(t);
                    int totalSize = re.getRallyEvaluationSkillScore().size();

                    if (re.getRallyEvaluationSkillScore().size() > 8) {

                        DefaultTableModel model;
                        model = (DefaultTableModel) pnBut.tblDetails.getModel();
                        for (int o = model.getRowCount() - 1; o >= 0; o--) {
                            model.removeRow(o);

                        }
                        int i = 0;
                        for (int k = 0; k < 8; k++) {
                            RallyEvaluationSkillScore rs = re.getRallyEvaluationSkillScore().get(k);
                            Object[] row = {Skill.getNameById(rs.getSkillId()), playerMap.get(rs.getPlayerId()) == null ? "" : playerMap.get(rs.getPlayerId()).getChestNo(), rs.getScore()};
                            model.addRow(row);
                            i++;
                        }

                        int extra;
                        int remain = re.getRallyEvaluationSkillScore().size() - 8;
                        if ((remain) < 13) {
                            extra = 1;
                        } else if (((remain) % 13) == 0) {
                            extra = (remain) / 13;
                        } else {
                            extra = ((remain) / 13) + 1;
                        }

                        for (int j = 0; j < extra; j++) {
                            PanRallyReportExt pnButExt = new PanRallyReportExt();
                            t = new TotalRallies();
                            t.setType("extra");
                            t.setPnPanRallyReportExt(pnButExt);
                            rallyList.add(t);

                            DefaultTableModel modelExtra;
                            modelExtra = (DefaultTableModel) pnButExt.tblDetailsExt.getModel();
                            model = (DefaultTableModel) pnBut.tblDetails.getModel();
                            for (int o = modelExtra.getRowCount() - 1; o >= 0; o--) {
                                modelExtra.removeRow(o);

                            }
                            for (int m = i; m < totalSize; m++) {

                                try {
                                    RallyEvaluationSkillScore rs = re.getRallyEvaluationSkillScore().get(m);
                                    Object[] row = {Skill.getNameById(rs.getSkillId()), playerMap.get(rs.getPlayerId()) == null ? "" : playerMap.get(rs.getPlayerId()).getChestNo(), rs.getScore()};
                                    modelExtra.addRow(row);
                                    i++;
                                } catch (Exception e) {
                                    Object[] row = {"", "", ""};
                                    modelExtra.addRow(row);
                                }
                            }
                        }

                    } else {
                        DefaultTableModel model;
                        model = (DefaultTableModel) pnBut.tblDetails.getModel();
                        for (int o = model.getRowCount() - 1; o >= 0; o--) {
                            model.removeRow(o);

                        }
                        for (int i = 0; i < 8; i++) {
                            try {
                                RallyEvaluationSkillScore rs = re.getRallyEvaluationSkillScore().get(i);

                                Object[] row = {Skill.getNameById(rs.getSkillId()), playerMap.get(rs.getPlayerId()) == null ? "" : playerMap.get(rs.getPlayerId()).getChestNo(), rs.getScore()};
                                model.addRow(row);

                            } catch (Exception e) {
                                Object[] row = {"", "", ""};
                                model.addRow(row);
                            }
                        }
                    }
                }
                
int totalRallies = rallyList.size();
                int rallyNum = 0;
                int rows = 0;

                int limit;
                if (totalRallies > 15) {
                    limit = 15;
                    rows = 3;
                } else {
                    limit = totalRallies;
                    if (totalRallies < 5) {
                        rows = 1;
                    } else if (totalRallies % 5 == 0) {
                        rows = totalRallies / 5;
                    } else {

                        rows = (totalRallies / 5) + 1;
                    }
                }

                p.panHeadingRallyList.setLayout(new GridLayout(3, 5));
                for (int i = 0; i < 15; i++) {

                    try {
                        TotalRallies t = rallyList.get(rallyNum);

                        if (t.getType().equalsIgnoreCase("new")) {
                            PanRallyReport pnBut = t.getPnPanRallyReport();
                            p.panHeadingRallyList.add(pnBut);
                        } else {
                            PanRallyReportExt pnButeExt = t.getPnPanRallyReportExt();
                            p.panHeadingRallyList.add(pnButeExt);
                        }
                    } catch (Exception e) {
                        PanRallyReport pnBut = new PanRallyReport();
                        p.panHeadingRallyList.add(pnBut);
                    }
                    rallyNum++;

//            pnBut.setRally(rally.getRallyNum(), matchEvaluationId, initialPositionMap, evaluationType);
                }
                panRallyList.add(p);
                printComponent.add(p);

                if (totalRallies > 15) {

                    int extra;
                    int limit1;
                    int remain = totalRallies - 15;
                    if ((remain) < 20) {
                        extra = 1;
                    } else if (((remain) % 20) == 0) {
                        extra = (remain) / 20;
                    } else {
                        extra = ((remain) / 20) + 1;
                    }

                    for (int j = 0; j < extra; j++) {

                        int row;

                        if (remain < 20) {
                            remain = remain;
                            limit1 = rallyNum + remain;

                            if (remain < 5) {
                                row = 1;
                            } else if (remain % 5 == 0) {
                                row = remain / 5;
                            } else {

                                row = (remain / 5) + 1;
                            }
                        } else {
                            remain = totalRallies - rallyNum;
                            limit1 = rallyNum + 20;
                            row = 4;
                        }

                        JPanel pan = new JPanel();
                        pan.setBackground(Color.WHITE);
                        pan.setLayout(new GridLayout(4, 5));
                        for (int i = 0; i < 20; i++) {
                            try {
                                TotalRallies t = rallyList.get(rallyNum);

                                if (t.getType().equalsIgnoreCase("new")) {
                                    PanRallyReport pnBut = t.getPnPanRallyReport();
                                    pan.add(pnBut);
                                } else {
                                    PanRallyReportExt pnButeExt = t.getPnPanRallyReportExt();
                                    pan.add(pnButeExt);
                                }
                            } catch (Exception e) {
                                PanRallyReport pnBut = new PanRallyReport();
                                pan.add(pnBut);
                            }
                            rallyNum++;
                        }
                        panRallyList.add(pan);
                        printComponent.add(pan);
                    }

                }

                validate();
                repaint();

            }else{
                panRallyList.removeAll();
                JLabel l = new JLabel("No data Available");
                l.setFont(new Font("Times New Roman",Font.BOLD,18));
                l.setHorizontalAlignment(JLabel.CENTER);
                 panRallyList.add(l);
                  validate();
                repaint();
                    
                    }

        }

    }//GEN-LAST:event_jLabel3MouseClicked

    public void printComponenet(final Component comp) {

        PageFormat documentPageFormat = new PageFormat();
        documentPageFormat.setOrientation(PageFormat.PORTRAIT);

        PrinterJob pj = PrinterJob.getPrinterJob();
        pj.setJobName("Score Report_-_");

        Book book = new Book();

        for (Component c : printComponent) {
            final Component comp1 = c;
            Printable p1 = new Printable() {

                @Override
                public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) throws PrinterException {
//                    if (pageIndex > 0) {
//                        return Printable.NO_SUCH_PAGE;
//                    }

//                format.setOrientation(PageFormat.LANDSCAPE);
                    // get the bounds of the component
                    Dimension dim = comp1.getSize();
                    double cHeight = dim.getHeight();
                    double cWidth = dim.getWidth();

                    // get the bounds of the printable area
                    double pHeight = pageFormat.getImageableHeight();
                    double pWidth = pageFormat.getImageableWidth();

                    double pXStart = pageFormat.getImageableX();
                    double pYStart = pageFormat.getImageableY();

                    double xRatio = pWidth / cWidth;
                    double yRatio = pHeight / cHeight;

                    Graphics2D g2 = (Graphics2D) graphics;
                    g2.translate(pXStart, pYStart);
                    g2.scale(xRatio, yRatio);
                    comp1.printAll(g2);

                    return Printable.PAGE_EXISTS;
                }
            };
            book.append(p1, documentPageFormat);
        }

        pj.setPageable(book);

        if (pj.printDialog() == false) {
            return;
        }

        try {
            pj.print();
        } catch (PrinterException ex) {
            // handle exception
        }

//
//        if (pj.printDialog() == false) {
//            return;
//        }
//
//        try {
//            pj.print();
//        } catch (PrinterException ex) {
//            // handle exception
//        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cmbSet;
    private javax.swing.JComboBox cmbTeam;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblPrint1;
    private javax.swing.JPanel panRallyList;
    // End of variables declaration//GEN-END:variables
}
