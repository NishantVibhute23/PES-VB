/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.vollyball.panels;

import com.vollyball.bean.VollyCourtCoordinateBean;
import com.vollyball.dao.RallyDao;
import com.vollyball.dialog.CreateDiagram;
import com.vollyball.enums.Skill;
import com.vollyball.enums.SkillsDescCriteria;
import com.vollyball.util.CommonUtil;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.UIManager;

/**
 *
 * @author nishant.vibhute
 */
public class PanRallyPostEvaluation extends javax.swing.JPanel {

    public PanSkillDetailsListValue panSkillDetailsListValue;
    PanRallyEvaluationRow p;
    public List<PanPostSkillDetailsCriteriaRow> panListRow = new ArrayList<>();
    LinkedHashMap<Integer, String> detailsValues = new LinkedHashMap<Integer, String>();
    String item, chestNum;
    int skillId;
    String score;

    /**
     * Creates new form PanRallyPostEvaluation
     *
     * @param item
     * @param p
     * @param skill
     * @param chestNum
     * @param detailsValues
     */
    public PanRallyPostEvaluation(String item, PanRallyEvaluationRow p, String skill, String chestNum, LinkedHashMap<Integer, String> detailsValues) {
        initComponents();
        this.p = p;
        this.item = item;
        this.chestNum = chestNum;
        this.skillId = Skill.getIdByName(skill).getId();
        this.detailsValues = detailsValues;

        panSkillDetailsListValue = new PanSkillDetailsListValue();
//        Controller.panMatchSet.panButton.setVisible(false);
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception ex) {
        }

//        panCompListValue.setBounds(0, 0, dim.width, dim.height);
        panSkillDesc.add(panSkillDetailsListValue, BorderLayout.CENTER);
    }

    public class PanSkillDetailsListValue extends JPanel {

        private JPanel mainList;
        JScrollPane s;

        public PanSkillDetailsListValue() {

            setLayout(new BorderLayout());
            mainList = new JPanel(new GridBagLayout());
            GridBagConstraints gbc = new GridBagConstraints();
            gbc.gridwidth = GridBagConstraints.REMAINDER;
            gbc.weightx = 1;
            gbc.weighty = 1;
            mainList.add(new JPanel(), gbc);
            add(new JScrollPane(mainList));

            int i = 0;
            List<SkillsDescCriteria> list = SkillsDescCriteria.getTypeBySkill(skillId);
            for (SkillsDescCriteria cb : list) {
                PanPostSkillDetailsCriteriaRow panel = new PanPostSkillDetailsCriteriaRow(cb.getType());
//                panel.setBorder(new MatteBorder(0, 0, 1, 0, Color.GRAY));
                if (detailsValues.containsKey(cb.getId())) {
                    panel.setValue(detailsValues.get(cb.getId()));
                }

                GridBagConstraints gbcRow = new GridBagConstraints();
                gbcRow.gridwidth = GridBagConstraints.REMAINDER;
                gbcRow.weightx = 1;
                gbcRow.gridheight = 2;
                gbcRow.fill = GridBagConstraints.HORIZONTAL;
                mainList.add(panel, gbcRow, i);
                panListRow.add(panel);
                i++;

            }

        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        panSkillDesc = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 141, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 51, Short.MAX_VALUE)
        );

        jLabel1.setText("jLabel1");

        setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jPanel1.setBackground(new java.awt.Color(54, 78, 108));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 36, Short.MAX_VALUE)
        );

        panSkillDesc.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panSkillDesc.setLayout(new java.awt.BorderLayout());

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jPanel5.setBackground(new java.awt.Color(54, 78, 108));
        jPanel5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("SAVE");
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
        );

        jPanel6.setBackground(new java.awt.Color(54, 78, 108));
        jPanel6.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("DIAGRAM");
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(45, Short.MAX_VALUE)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(45, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panSkillDesc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(panSkillDesc, javax.swing.GroupLayout.DEFAULT_SIZE, 284, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        // TODO add your handling code here:

        for (int i = 0; i < panListRow.size(); i++) {
            try {
                PanPostSkillDetailsCriteriaRow panRallyEvaluationRow = panListRow.get(i);

                if (panRallyEvaluationRow.skillDescId != 0) {
                    detailsValues.put(panRallyEvaluationRow.skillDescId, panRallyEvaluationRow.value);
                }
            } catch (Exception ex) {
                Logger.getLogger(PanRallyLiveEvaluation.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        p.setDetailsValues(detailsValues);
        p.setRallyRow(item);
    }//GEN-LAST:event_jLabel2MouseClicked

    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
        // TODO add your handling code here:

        RallyDao rd = new RallyDao();
        LinkedHashMap<Integer, String> Dig = new LinkedHashMap<Integer, String>();
        int home = 0, opp = 0;
        for (int i = 0; i < panListRow.size(); i++) {
            try {
                PanPostSkillDetailsCriteriaRow panRallyEvaluationRow = panListRow.get(i);
                Dig.put(panRallyEvaluationRow.skillDescId, panRallyEvaluationRow.value);
            } catch (Exception ex) {
                Logger.getLogger(PanRallyLiveEvaluation.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        String type = null;

        if (skillId == Skill.Service.getId()) {
            home = Integer.parseInt(Dig.get(SkillsDescCriteria.ServiceD.getId()));
            opp = Integer.parseInt(Dig.get(SkillsDescCriteria.ServiceE.getId()));
            type = Skill.getNameById(skillId).getType();
        }

        if (skillId == Skill.Attack.getId()) {
            home = Integer.parseInt(Dig.get(SkillsDescCriteria.AttackE.getId()));
            opp = Integer.parseInt(Dig.get(SkillsDescCriteria.AttackF.getId()));
            type = Skill.getNameById(skillId).getType();
        }

        if (skillId == Skill.Set.getId()) {
            home = Integer.parseInt(Dig.get(SkillsDescCriteria.SetF.getId()));
            opp = Integer.parseInt(Dig.get(SkillsDescCriteria.SetG.getId()));
            type = Skill.getNameById(skillId).getType() + "H";
        }

        if (skillId == Skill.Reception.getId()) {
            home = Integer.parseInt(Dig.get(SkillsDescCriteria.ReceptionC.getId()));
            opp = Integer.parseInt(Dig.get(SkillsDescCriteria.ReceptionD.getId()));
            type = Skill.getNameById(skillId).getType();
        }

        if (skillId == Skill.Defence.getId()) {
            home = Integer.parseInt(Dig.get(SkillsDescCriteria.DefenceH.getId()));
            opp = Integer.parseInt(Dig.get(SkillsDescCriteria.DefenceI.getId()));
            type = Skill.getNameById(skillId).getType();
        }

        if (skillId == Skill.Block.getId()) {
            List<VollyCourtCoordinateBean> listCCB = new ArrayList<>();
            home = Integer.parseInt(Dig.get(SkillsDescCriteria.BlockF.getId()));
            opp = Integer.parseInt(Dig.get(SkillsDescCriteria.BlockG.getId()));
            type = Skill.getNameById(skillId).getType() + "Attack";

            VollyCourtCoordinateBean v = rd.getCordinates(type, home, opp);
            listCCB.add(v);

            String court = Dig.get(SkillsDescCriteria.BlockM.getId());
            home = Integer.parseInt(Dig.get(SkillsDescCriteria.BlockG.getId()));
            if (court.equalsIgnoreCase("H")) {
                type = Skill.getNameById(skillId).getType() + "RH";

            } else {
                type = Skill.getNameById(skillId).getType() + "RO";
            }

            String oppH = Dig.get(SkillsDescCriteria.BlockH.getId());

            switch (oppH) {
                case "LOC":
                    opp = 7;
                    break;
                case "ROC":
                    opp = 8;
                    break;
                case "BOC":
                    opp = 9;
                    break;
                default:
                    opp = Integer.parseInt(oppH);
                    break;
            }
            Color c = CommonUtil.getColorONScore(this.item);
            VollyCourtCoordinateBean v1 = rd.getCordinates(type, home, opp);
            v1.setColor(c);
            listCCB.add(v1);
            CreateDiagram cd = new CreateDiagram();
            cd.setValues(listCCB, "Evaluation");
            cd.init();
            cd.show();
        }

        if (skillId != Skill.Block.getId()) {
            VollyCourtCoordinateBean v = rd.getCordinates(type, home, opp);
            CreateDiagram cd = new CreateDiagram();
            cd.setValues(v, chestNum, "Evaluation");
            cd.init();
            cd.show();
        }

    }//GEN-LAST:event_jLabel3MouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel panSkillDesc;
    // End of variables declaration//GEN-END:variables
}
